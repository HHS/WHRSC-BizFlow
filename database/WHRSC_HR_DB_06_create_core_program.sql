
--=============================================================================
-- Create STORED PROCEDURE for WHRSC project
-------------------------------------------------------------------------------

--------------------------------------------------------
--  DDL for Procedure SP_ERROR_LOG
--------------------------------------------------------
SET DEFINE OFF;


--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_MULTI_SELECT
--------------------------------------------------------

create or replace PROCEDURE SP_UPDATE_MULTI_SELECT(
    I_TRANSACTIONID IN NUMBER
    ,I_FORM_NAME       IN  VARCHAR2
    ,I_FIELD_NAME      IN  VARCHAR2
    ,I_TABLE_NAME      IN VARCHAR2
)
IS

V_M_VALUE         VARCHAR2(1000);
V_Q_EXEC          VARCHAR2(1200);

BEGIN
    --V_Q_EXEC := 'SELECT ' || I_FIELD_NAME || ' INTO ' || V_M_VALUE || ' FROM ' || I_TABLE_NAME || ' WHERE TRANSACTION_ID = ' || I_TRANSACTIONID;
    
    
    BEGIN
    
        V_Q_EXEC := 'SELECT ' || I_FIELD_NAME || ' FROM ' || I_TABLE_NAME || ' WHERE TRANSACTION_ID = ' || I_TRANSACTIONID;
        execute immediate V_Q_EXEC INTO V_M_VALUE;
        
        --SELECT ARP_STEP_DETERMINATION into V_M_VALUE FROM whrsc.APPOINTMENT WHERE TRANSACTION_ID = I_TRANSACTIONID;
        
        DBMS_OUTPUT.PUT_LINE('ERROR 1 -------------------');
        
        
    EXCEPTION
            WHEN NO_DATA_FOUND THEN
            --DBMS_OUTPUT.PUT_LINE('ERROR 222 -------------------');
                V_M_VALUE := '';
	END;
      
    BEGIN
        
            DELETE FROM FORMS_FIELDS WHERE TRANSACTION_ID = I_TRANSACTIONID AND FORM_NAME = I_FORM_NAME AND FIELD_NAME = I_FIELD_NAME;
            --DBMS_OUTPUT.PUT_LINE('ERROR 3 -------------------');
    END;
    
    --DBMS_OUTPUT.PUT_LINE('E -------------------' || V_M_VALUE);
    IF  V_M_VALUE is not Null AND Length(V_M_VALUE) > 0 THEN
       -- DBMS_OUTPUT.PUT_LINE('if check -------------------');
     
        --DBMS_OUTPUT.PUT_LINE('ERROR 4 -------------------');
        
        BEGIN
    
            INSERT INTO FORMS_FIELDS (TRANSACTION_ID, FORM_NAME, FIELD_NAME, VALUE)
            SELECT  I_TRANSACTIONID AS Transaction_ID, I_FORM_NAME AS Form_Name, I_FIELD_NAME AS Field_Name, SUBSTR (COL,
                   INSTR (COL, ',', 1, LEVEL) + 1,
                   INSTR (COL, ',', 1, LEVEL + 1) - INSTR (COL, ',', 1, LEVEL)
                   - 1) AS COL
            FROM (SELECT ',' || V_M_VALUE || ',' AS COL
                          FROM DUAL)
            CONNECT BY LEVEL <= LENGTH (COL) - LENGTH (REPLACE (COL, ',')) - 1;
            
            --DBMS_OUTPUT.PUT_LINE('ERROR 5 -------------------');
        
        
        END;
     
    END IF;

	COMMIT;
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR 6 -------------------');
        RAISE_APPLICATION_ERROR(-20905, 'INSERT FORMS_FIELDS TABLE: Invalid data.  I_TRANSACTIONID = '
		|| TO_CHAR(I_TRANSACTIONID));
    
END;
/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_MULTI_SELECT_RATER
--------------------------------------------------------

create or replace PROCEDURE SP_UPDATE_MULTI_SELECT_RATER
(
    I_TRANSACTIONID IN NUMBER
    ,I_FORM_NAME       IN  VARCHAR2
    ,I_FIELD_VALUE      IN  VARCHAR2
    ,I_ANN_NUMBER      IN VARCHAR2
)

IS

BEGIN
    --V_Q_EXEC := 'SELECT ' || I_FIELD_NAME || ' INTO ' || V_M_VALUE || ' FROM ' || I_TABLE_NAME || ' WHERE TRANSACTION_ID = ' || I_TRANSACTIONID;
    
      
    BEGIN
        
            DELETE FROM FORMS_FIELDS WHERE TRANSACTION_ID = I_TRANSACTIONID AND FORM_NAME = I_FORM_NAME AND FIELD_NAME = 'RATER' AND ANN_NUMBER = I_ANN_NUMBER;
            --DBMS_OUTPUT.PUT_LINE('ERROR 3 -------------------');
    END;
    
    --DBMS_OUTPUT.PUT_LINE('E -------------------' || V_M_VALUE);
    IF  I_FIELD_VALUE is not Null AND Length(I_FIELD_VALUE) > 0 THEN
       -- DBMS_OUTPUT.PUT_LINE('if check -------------------');
     
        --DBMS_OUTPUT.PUT_LINE('ERROR 4 -------------------');
        
        BEGIN
    
            INSERT INTO FORMS_FIELDS (TRANSACTION_ID, FORM_NAME, FIELD_NAME, ANN_NUMBER, VALUE)
            SELECT  I_TRANSACTIONID AS Transaction_ID, I_FORM_NAME AS Form_Name, 'RATER' AS Field_Name, I_ANN_NUMBER AS Ann_Number, SUBSTR (COL,
                   INSTR (COL, ',', 1, LEVEL) + 1,
                   INSTR (COL, ',', 1, LEVEL + 1) - INSTR (COL, ',', 1, LEVEL)
                   - 1) AS COL
            FROM (SELECT ',' || I_FIELD_VALUE || ',' AS COL
                          FROM DUAL)
            CONNECT BY LEVEL <= LENGTH (COL) - LENGTH (REPLACE (COL, ',')) - 1;
            
            --DBMS_OUTPUT.PUT_LINE('ERROR 5 -------------------');
        
        
        END;
     
    END IF;

	COMMIT;
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR 6 -------------------');
        RAISE_APPLICATION_ERROR(-20905, 'INSERT FORMS_FIELDS TABLE: Invalid data.  I_TRANSACTIONID = '
		|| TO_CHAR(I_TRANSACTIONID));
  
END;
/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_PV_DETERMINE
--------------------------------------------------------

create or replace PROCEDURE SP_UPDATE_PV_DETERMINE
(
	I_PROCID            IN      NUMBER
	, I_FIELD_DATA      IN      XMLTYPE
)
IS
	V_RLVNTDATANAME        VARCHAR2(100);
	V_VALUE                NVARCHAR2(2000);
	V_VALUE_LOOKUP         NVARCHAR2(2000);
	V_CURRENTDATE          DATE;
	V_CURRENTDATESTR       NVARCHAR2(30);
	V_VALUE_DATE           DATE;
	V_VALUE_DATESTR        NVARCHAR2(30);
	V_REC_CNT              NUMBER(10);
	V_XMLDOC               XMLTYPE;
	V_XMLVALUE             XMLTYPE;
BEGIN
	--DBMS_OUTPUT.PUT_LINE('PARAMETERS ----------------');
	--DBMS_OUTPUT.PUT_LINE('    I_PROCID IS NULL?  = ' || (CASE WHEN I_PROCID IS NULL THEN 'YES' ELSE 'NO' END));
	--DBMS_OUTPUT.PUT_LINE('    I_PROCID           = ' || TO_CHAR(I_PROCID));
	--DBMS_OUTPUT.PUT_LINE('    I_FIELD_DATA       = ' || I_FIELD_DATA.GETCLOBVAL());
	--DBMS_OUTPUT.PUT_LINE(' ----------------');
	--V_XMLDOC := XMLTYPE(I_FIELD_DATA);
	V_XMLDOC := I_FIELD_DATA;


	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN
		--DBMS_OUTPUT.PUT_LINE('Starting PV update ----------');

		V_RLVNTDATANAME := 'hrSpecialist';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpecialist/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrSpecialistName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpecialistName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'branch';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/branch/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
   
    V_RLVNTDATANAME := 'actionType';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/actionType/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('Error occurred while executing SP_UPDATE_PV_DETERMINE -------------------');
END;
/

--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_PV_RECRUITMENT
--------------------------------------------------------

create or replace PROCEDURE SP_UPDATE_PV_RECRUITMENT
(
	I_PROCID            IN      NUMBER
	, I_FIELD_DATA      IN      XMLTYPE
)
IS
	V_RLVNTDATANAME        VARCHAR2(100);
	V_VALUE                NVARCHAR2(2000);
	V_VALUE_LOOKUP         NVARCHAR2(2000);
	V_CURRENTDATE          DATE;
	V_CURRENTDATESTR       NVARCHAR2(30);
	V_VALUE_DATE           DATE;
	V_VALUE_DATESTR        NVARCHAR2(30);
	V_REC_CNT              NUMBER(10);
	V_XMLDOC               XMLTYPE;
	V_XMLVALUE             XMLTYPE;
BEGIN
	--DBMS_OUTPUT.PUT_LINE('PARAMETERS ----------------');
	--DBMS_OUTPUT.PUT_LINE('    I_PROCID IS NULL?  = ' || (CASE WHEN I_PROCID IS NULL THEN 'YES' ELSE 'NO' END));
	--DBMS_OUTPUT.PUT_LINE('    I_PROCID           = ' || TO_CHAR(I_PROCID));
	--DBMS_OUTPUT.PUT_LINE('    I_FIELD_DATA       = ' || I_FIELD_DATA.GETCLOBVAL());
	--DBMS_OUTPUT.PUT_LINE(' ----------------');
	--V_XMLDOC := XMLTYPE(I_FIELD_DATA);
	V_XMLDOC := I_FIELD_DATA;


	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN
		DBMS_OUTPUT.PUT_LINE('Starting PV update ----------');
    
    V_RLVNTDATANAME := 'requisitionNumber';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/requisitionNumber/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
  
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
    
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'requestNumber';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/requestNumber/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
  
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
    
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'vinAnnouncementNumber';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/vinAnnouncementNumber/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
      SELECT REPLACE(V_VALUE, '&lt;', '<') INTO V_VALUE FROM DUAL;
      SELECT REPLACE(V_VALUE, '&gt;', '>') INTO V_VALUE FROM DUAL;
      SELECT REPLACE(V_VALUE, '&apos;', '''') INTO V_VALUE FROM DUAL;
  	ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'deHSEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/deHSEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'qrEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/qrEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'branch';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/branch/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
  
        V_RLVNTDATANAME := 'hrBranchChief';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrBranchChief/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrBranchChiefName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrBranchChiefName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrBranchChiefEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrBranchChiefEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
 
    V_RLVNTDATANAME := 'hrSpecialist';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpecialist/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
     V_RLVNTDATANAME := 'hrSpecialistEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpecialistEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
   
    --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrSpecialistName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpecialistName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrSeniorAdvisor';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSeniorAdvisor/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'hrSeniorAdvisorName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSeniorAdvisorName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'hrSeniorAdvisorEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSeniorAdvisorEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'hrAssistant';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrAssistant/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'hrAssistantName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrAssistantName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
     V_RLVNTDATANAME := 'hrSpa';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpa/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    
    V_RLVNTDATANAME := 'hrSpaName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpaName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
     V_RLVNTDATANAME := 'lastActionUserEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/lastActionUserEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
     V_RLVNTDATANAME := 'lastActionUserLogin';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/lastActionUserLogin/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrTeamLeaderEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrTeamLeaderEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
        V_RLVNTDATANAME := 'hrTeamLeader';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrTeamLeader/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrTeamLeaderName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrTeamLeaderName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'liasionEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/liasionEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
     V_RLVNTDATANAME := 'selectingOfficialEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/selectingOfficialEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'supervisorEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/supervisorEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'customerCenter';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/customerCenter/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'orgInit';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/orgInit/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'priority';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/priority/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'adminCode';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/adminCode/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'missingDocs';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/missingDocs/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'transactionInfoComments';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/transactionInfoComments/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'proposedEffDate';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/proposedEffDate/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'deStatus';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/deStatus/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
  
     V_RLVNTDATANAME := 'dateSentDeu';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/dateSentDeu/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('Error occurred while executing SP_UPDATE_PV_RECRUITMENT -------------------');
END;
/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_PV_APPOINTMENT
--------------------------------------------------------

create or replace PROCEDURE SP_UPDATE_PV_APPOINTMENT
(
	I_PROCID            IN      NUMBER
	, I_FIELD_DATA      IN      XMLTYPE
)
IS
	V_RLVNTDATANAME        VARCHAR2(100);
	V_VALUE                NVARCHAR2(2000);
	V_VALUE_LOOKUP         NVARCHAR2(2000);
	V_CURRENTDATE          DATE;
	V_CURRENTDATESTR       NVARCHAR2(30);
	V_VALUE_DATE           DATE;
	V_VALUE_DATESTR        NVARCHAR2(30);
	V_REC_CNT              NUMBER(10);
	V_XMLDOC               XMLTYPE;
	V_XMLVALUE             XMLTYPE;
BEGIN
	--DBMS_OUTPUT.PUT_LINE('PARAMETERS ----------------');
	--DBMS_OUTPUT.PUT_LINE('    I_PROCID IS NULL?  = ' || (CASE WHEN I_PROCID IS NULL THEN 'YES' ELSE 'NO' END));
	--DBMS_OUTPUT.PUT_LINE('    I_PROCID           = ' || TO_CHAR(I_PROCID));
	--DBMS_OUTPUT.PUT_LINE('    I_FIELD_DATA       = ' || I_FIELD_DATA.GETCLOBVAL());
	--DBMS_OUTPUT.PUT_LINE(' ----------------');
	--V_XMLDOC := XMLTYPE(I_FIELD_DATA);
	V_XMLDOC := I_FIELD_DATA;


	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN
		DBMS_OUTPUT.PUT_LINE('Starting PV update ----------');
    
    V_RLVNTDATANAME := 'requisitionNumber';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/requisitionNumber/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
  
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
    
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    /*
    V_RLVNTDATANAME := 'vinAnnouncementNumber';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/vinAnnouncementNumber/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
      SELECT REPLACE(V_VALUE, '&lt;', '<') INTO V_VALUE FROM DUAL;
      SELECT REPLACE(V_VALUE, '&gt;', '>') INTO V_VALUE FROM DUAL;
      SELECT REPLACE(V_VALUE, '&apos;', '''') INTO V_VALUE FROM DUAL;
  	ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    */
    
    V_RLVNTDATANAME := 'branch';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/branch/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
 
    V_RLVNTDATANAME := 'hrBranchChief';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrBranchChief/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrBranchChiefName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrBranchChiefName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrBranchChiefEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrBranchChiefEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrTeamLeaderEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrTeamLeaderEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrTeamLeader';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrTeamLeader/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrTeamLeaderName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrTeamLeaderName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrSeniorAdvisor';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSeniorAdvisor/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
    UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrSeniorAdvisorName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSeniorAdvisorName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);	
    UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    V_RLVNTDATANAME := 'hrSeniorAdvisorEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSeniorAdvisorEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
	   UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrSpecialistName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpecialistName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
   
    V_RLVNTDATANAME := 'hrSpecialistEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpecialistEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrSpecialist';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpecialist/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrAssistant';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrAssistant/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrAssistantName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrAssistantName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrAssistantEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrAssistantEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrSpa';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpa/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
   
    --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrSpaName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpaName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrSpaEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrSpaEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'hrDeSelApprover';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrDeSelApprover/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'hrDeSelApproverEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrDeSelApproverEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'hrDeSelApproverName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/hrDeSelApproverName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'liasionEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/liasionEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'supervisorEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/supervisorEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'customerCenter';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/customerCenter/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    
    V_RLVNTDATANAME := 'orgInit';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/orgInit/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'adminCode';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/adminCode/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'lastActionUserEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/lastActionUserEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'lastActionUserLogin';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/lastActionUserLogin/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'initiatorEmail';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/initiatorEmail/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
  
    V_RLVNTDATANAME := 'priority';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/priority/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    
    V_RLVNTDATANAME := 'proposedEffDate';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/proposedEffDate/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'firstName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/firstName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'lastName';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/lastName/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'requestedGrade';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/requestedGrade/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'requestedPayPlan';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/requestedPayPlan/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'requestedPositionTitle';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/requestedPositionTitle/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'requestedSeries';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/requestedSeries/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'requestedBand';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/requestedBand/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'announcementNumber';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/announcementNumber/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'certNumber';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/certNumber/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'deAdditionalInfoNeeded';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/deAdditionalInfoNeeded/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'deDecisionComments';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/deDecisionComments/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'transactionInfoComments';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/transactionInfoComments/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
    
    V_RLVNTDATANAME := 'missingDocs';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/missingDocs/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'initiateBenefits';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/initiateBenefits/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

    V_RLVNTDATANAME := 'deStatus';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/deStatus/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
  
     V_RLVNTDATANAME := 'dateSentDeu';
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/dateSentDeu/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_VALUE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_VALUE := NULL;
		END IF;
		--DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
		--DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
		UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_VALUE WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

	END IF;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('Error occurred while executing SP_UPDATE_PV_APPOINTMENT -------------------');
END;
/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_DETERMINE_TABLE
--------------------------------------------------------

create or replace PROCEDURE SP_UPDATE_DETERMINE_TABLE
	(
		I_PROCID            IN      NUMBER
    , I_FIELD_DATA      IN      XMLTYPE
	)
	IS
		V_CLOBVALUE                 CLOB;
		V_VALUE                     NVARCHAR2(4000);
		V_VALUE_LOOKUP              NVARCHAR2(2000);
		V_XMLDOC                    XMLTYPE;
		V_XMLVALUE                  XMLTYPE;
		V_ERRCODE                   NUMBER(10);
		V_ERRMSG                    VARCHAR2(512);
		E_INVALID_PROCID            EXCEPTION;
    V_STATUS                    NVARCHAR2(10);
    V_STATUSDATE                NVARCHAR2(20);
    V_STATUSUSERID              NVARCHAR2(50);
	
	BEGIN
		DBMS_OUTPUT.PUT_LINE('SP_UPDATE_DETERMINE_TABLE - BEGIN ============================');
		DBMS_OUTPUT.PUT_LINE('PARAMETERS ----------------');
		DBMS_OUTPUT.PUT_LINE('    I_PROCID IS NULL?  = ' || (CASE WHEN I_PROCID IS NULL THEN 'YES' ELSE 'NO' END));
		DBMS_OUTPUT.PUT_LINE('    I_PROCID           = ' || TO_CHAR(I_PROCID));
		DBMS_OUTPUT.PUT_LINE(' ----------------');
    
    V_XMLDOC := I_FIELD_DATA;
		IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN
			------------------------------------------------------

			------------------------------------------------------
			--DBMS_OUTPUT.PUT_LINE('Starting xml data retrieval and table update ----------');
      
			BEGIN
				--------------------------------
				-- MAIN table
				--------------------------------
				MERGE INTO MAIN TRG
				USING
				(
					SELECT
						X.TRANSACTION_ID
						, X.GLOBAL_RECRUITMENT
						, X.HR_SPECIALIST
						, X.HR_SPECIALIST_ID
						, X.ACTION_TYPE
						, X.INTERNAL_COMMENTS
						, X.RYB_CODE 
						, X.RYB_STATUS
						, X.RYB_DESCRIPTION
					FROM TBL_FORM_DTL FD
						, XMLTABLE('/DOCUMENT/DETERMINE'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'TRANSACTION_ID'
								,GLOBAL_RECRUITMENT			VARCHAR2(3) PATH 'GLOBAL_RECRUITMENT'
								,HR_SPECIALIST				  VARCHAR2(100) PATH  'HR_SPECIALIST'
								,HR_SPECIALIST_ID				VARCHAR2(50) PATH 'HR_SPECIALIST_ID'
								,ACTION_TYPE				    VARCHAR2(50) PATH 'ACTION_TYPE'
							       ,INTERNAL_COMMENTS      VARCHAR2(4000) PATH 'if (ACTION_TYPE/text() = "Recruitment") then null else INTERNAL_COMMENTS'
							       ,RYB_CODE               VARCHAR2(20) PATH 'if(ACTION_TYPE/text() = "Cancel") then null else RYB_CODE'
							       ,RYB_STATUS             VARCHAR2(20) PATH 'if(ACTION_TYPE/text() = "Cancel") then null else RYB_STATUS'
							       ,RYB_DESCRIPTION        VARCHAR2(50) PATH 'if(ACTION_TYPE/text() = "Cancel") then null else RYB_DESCRIPTION'
						) X
					WHERE X.TRANSACTION_ID = I_PROCID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
					TRG.GLOBAL_RECRUITMENT = SRC.GLOBAL_RECRUITMENT
					,TRG.HR_SPECIALIST = SRC.HR_SPECIALIST
					,TRG.HR_SPECIALIST_ID = SRC.HR_SPECIALIST_ID
					,TRG.ACTION_TYPE = SRC.ACTION_TYPE
					  ,TRG.INTERNAL_COMMENTS = SRC.INTERNAL_COMMENTS
					  ,TRG.RYB_CODE = SRC.RYB_CODE
					  ,TRG.RYB_STATUS = SRC.RYB_STATUS
					  ,TRG.RYB_DESCRIPTION = SRC.RYB_DESCRIPTION
				;
			EXCEPTION
				WHEN OTHERS THEN
					RAISE_APPLICATION_ERROR(-20905, 'SP_UPDATE_DETERMINE_TABLE: Invalid DETERMINE data.  I_PROCID = '
						|| TO_CHAR(I_PROCID));
			END;
      
      BEGIN
        --------------------------------
				-- RECRUITMENT table
				--------------------------------
        V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/DETERMINE/ACTION_TYPE/text()');
        IF V_XMLVALUE IS NOT NULL THEN
          V_VALUE := V_XMLVALUE.GETSTRINGVAL();
          IF V_VALUE = 'Recruitment' THEN 
            
            BEGIN
              MERGE INTO RECRUITMENT TRG
              USING
              (
                SELECT
                  X.TRANSACTION_ID,
                  X.INTERNAL_COMMENTS
                FROM TBL_FORM_DTL FD
                  , XMLTABLE('/DOCUMENT/DETERMINE'
                    PASSING FD.FIELD_DATA
                    COLUMNS
                      TRANSACTION_ID					NUMBER(10)  PATH 'TRANSACTION_ID'
                      ,INTERNAL_COMMENTS      VARCHAR2(4000) PATH 'INTERNAL_COMMENTS'
              ) X
                WHERE X.TRANSACTION_ID = I_PROCID
              ) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
              WHEN MATCHED THEN UPDATE SET
                TRG.PRERECRUIT_COMMENTS = SRC.INTERNAL_COMMENTS
              WHEN NOT MATCHED THEN INSERT
              (
                TRG.PRERECRUIT_COMMENTS
                , TRG.TRANSACTION_ID
              )
              VALUES
              (
                SRC.INTERNAL_COMMENTS
                , SRC.TRANSACTION_ID
                
              )
              ;
            EXCEPTION
              WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20905, 'SP_UPDATE_DETERMINE_TABLE: Invalid DETERMINE data.  I_PROCID = '
                  || TO_CHAR(I_PROCID));
            END;
     
           END IF;
        END IF;       
      END;

      BEGIN  
      	--------------------------------
				-- MAIN table
				--------------------------------
        V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/STATUS/text()');
        IF V_XMLVALUE IS NOT NULL THEN
          V_STATUS := V_XMLVALUE.GETSTRINGVAL();
          V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/STATUS_DATE/text()');
          V_VALUE := V_XMLVALUE.GETSTRINGVAL();
          V_STATUSDATE := TO_DATE(V_VALUE,'YYYY/MM/DD HH24:MI:SS');
          V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/STATUS_USER_ID/text()');
          V_STATUSUSERID := V_XMLVALUE.GETSTRINGVAL();
          
          UPDATE MAIN SET STATUS = V_STATUS, STATUS_DATE = V_STATUSDATE, STATUS_USER_ID = V_STATUSUSERID 
          WHERE TRANSACTION_ID = I_PROCID;
            
        END IF;
      END;
   
			--DBMS_OUTPUT.PUT_LINE('SP_UPDATE_DETERMINE_TABLE - END ==========================');

		END IF;

	EXCEPTION
		WHEN E_INVALID_PROCID THEN
			SP_ERROR_LOG();
			--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing SP_UPDATE_DETERMINE_TABLE -------------------');
			--DBMS_OUTPUT.PUT_LINE('ERROR message = ' || 'Process ID is not valid');
		WHEN OTHERS THEN
			SP_ERROR_LOG();
			V_ERRCODE := SQLCODE;
			V_ERRMSG := SQLERRM;
			--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing SP_UPDATE_DETERMINE_TABLE -------------------');
			--DBMS_OUTPUT.PUT_LINE('Error code    = ' || V_ERRCODE);
			--DBMS_OUTPUT.PUT_LINE('Error message = ' || V_ERRMSG);
	END;
/

--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_CERTIFICATE
--------------------------------------------------------

create or replace PROCEDURE SP_UPDATE_CERTIFICATE
(
      C_CN      IN  VARCHAR2
    , C_DIRC    IN  DATE
    , C_DFC     IN  DATE
    , C_CE      IN  VARCHAR2
    , C_NCED    IN  DATE
    , C_CC      IN  VARCHAR2
    , C_CRU     IN  VARCHAR2
    , C_CRUR    IN  VARCHAR2
    , C_DCR     IN  DATE
    , C_AN      IN  VARCHAR2
    , C_TN      IN  NUMBER
)
IS    
    V_CN      VARCHAR2(40);
    V_DIRC    DATE;
    V_DFC     DATE;
    V_CE      VARCHAR2(3);
    V_NCED    DATE;
    V_CC      VARCHAR2(3);
    V_CRU     VARCHAR2(70);
    V_CRUR    VARCHAR2(50);
    V_DCR     DATE;
    V_AN      VARCHAR2(40);
    V_TN      NUMBER(10);
    V_REC_CNT NUMBER(10);



BEGIN
    V_CN := C_CN;
    V_AN := C_AN;
    V_TN := C_TN;


	BEGIN
		SELECT COUNT(*) INTO V_REC_CNT FROM CERTIFICATE WHERE CERT_NUMBER = V_CN AND ANN_NUMBER = V_AN AND TRANSACTION_ID = V_TN;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_REC_CNT := -1;
	END;


    V_DIRC := C_DIRC;
    V_DFC := C_DFC;
    V_CE := C_CE;
    V_NCED := C_NCED;
    V_CC := C_CC;
    V_CRU := C_CRU;
    V_CRUR := C_CRUR;
    V_DCR := C_DCR;

	IF V_REC_CNT > 0 THEN


		UPDATE CERTIFICATE
		SET
			DATE_INTERNAL_REVIEW_COMPLETED = V_DIRC,
            DATE_10PT_FILE_CHECKED = V_DFC,
            CERT_EXTENDED = V_CE,
            DATE_NEW_CERT_EXPIRES = V_NCED,
            CERT_USED = V_CC,
            CERT_RET_UNUSED_REASON = V_CRU,
            CERT_RET_UNUSED_REASON_OTHER = V_CRUR,
            DT_CERT_RTN_TO_DEU_FNL_AUDIT = V_DCR
		WHERE CERT_NUMBER = V_CN AND ANN_NUMBER = V_AN AND TRANSACTION_ID = V_TN
		;

	ELSE


		INSERT INTO CERTIFICATE
		(
            TRANSACTION_ID,
            ANN_NUMBER,
			CERT_NUMBER,
            DATE_INTERNAL_REVIEW_COMPLETED,
            DATE_10PT_FILE_CHECKED,
            CERT_EXTENDED,
            DATE_NEW_CERT_EXPIRES,
            CERT_USED,
            CERT_RET_UNUSED_REASON,
            CERT_RET_UNUSED_REASON_OTHER,
            DT_CERT_RTN_TO_DEU_FNL_AUDIT
		)
		VALUES
		(
            V_TN,
            V_AN,
            V_CN,
			V_DIRC,
            V_DFC,
            V_CE,
            V_NCED,
            V_CC,
            V_CRU,
            V_CRUR,
            V_DCR
		)
		;
	END IF;


	COMMIT;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();

END;
/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_RECRUITMENT_PROCESS
--------------------------------------------------------

create or replace PROCEDURE SP_UPDATE_RECRUITMENT_PROCESS
	(
	I_TRANSACTIONID IN NUMBER
 , I_FIELD_DATA      IN      XMLTYPE
	)
	IS
		V_CLOBVALUE                 CLOB;
		V_VALUE                     NVARCHAR2(4000);
		V_VALUE_LOOKUP              NVARCHAR2(2000);
		V_XMLDOC                    XMLTYPE;
		V_XMLVALUE                  XMLTYPE;
		V_ERRCODE                   NUMBER(10);
		V_ERRMSG                    VARCHAR2(512);
		E_INVALID_PROCID            EXCEPTION;
    V_STATUS                    NVARCHAR2(20);
    V_STATUSDATE                NVARCHAR2(20);
    V_STATUSUSERID              NVARCHAR2(50);
    V_UPDATESTATUS              VARCHAR2(5);
    V_UPDATERYB                 VARCHAR2(5);
    V_RYBCODE                   VARCHAR2(50);
    V_RYBSTATUS                 VARCHAR2(50);
    V_RYBDESC                   VARCHAR2(100);
 	
	BEGIN
		DBMS_OUTPUT.PUT_LINE('SP_UPDATE_RECRUITMENT_PROCESS - BEGIN ============================');
		DBMS_OUTPUT.PUT_LINE('PARAMETERS ----------------');
		DBMS_OUTPUT.PUT_LINE(' ----------------');
    
		V_XMLDOC := I_FIELD_DATA;
		IF I_TRANSACTIONID IS NOT NULL AND I_TRANSACTIONID > 0 THEN
			------------------------------------------------------

			------------------------------------------------------
			--DBMS_OUTPUT.PUT_LINE('Starting xml data retrieval and table update ----------');
			
      BEGIN
				--------------------------------
				-- MAIN table
				--------------------------------
        
				MERGE INTO MAIN TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.ACTION_TYPE
            ,X.DATE_RECEIVED
					, X.DATE_SF52_RECEIVED
						, X.GLOBAL_RECRUITMENT
						, X.ADMIN_CODE
						, X.INSTITUTE
						, X.ORG_INITS
						, X.PROPOSED_EFF_DATE
						, X.BRANCH_CHIEF
						, X.BRANCH_CHIEF_ID
						, X.TEAM_LEADER
						, X.TEAM_LEADER_ID
						, X.HR_SPECIALIST
						, X.HR_SPECIALIST_ID
						, X.HR_ASSISTANT
						, X.HR_ASSISTANT_ID				
						, X.HR_SPA
						, X.HR_SPA_ID
						, X.PCKG_COMPLETE
						, X.MISSING_DOCS
						, X.MISSING_DOCS_EMAIL_SENT_DATE
						, X.MISSING_DOCS_RECEIPT_DATE
						, X.PRIORITY
						, X.RYB_CODE
						, X.RYB_STATUS
						, X.RYB_DESCRIPTION
						, X.COMMENTS_STATUS     
            , X.JOB_OPENING_ID
 						, X.DATE_JOB_OPENING_APPROVED
						, X.CAN_NO     
            , X.TK_NO	
            , X.SUBMITTED_PCKG_QLTY
            , X.SUBMITTED_PCKG_QLTY_COMMENTS
         	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
                ,ACTION_TYPE				    VARCHAR2(50) PATH 'TRANSACTION/ACTION_TYPE'
  				  		,DATE_RECEIVED						DATE PATH 'TRANSACTION/DATE_RECEIVED'
	    					 ,DATE_SF52_RECEIVED				DATE PATH 'TRANSACTION/DATE_SF52_RECEIVED'
								,GLOBAL_RECRUITMENT			VARCHAR2(3) PATH 'TRANSACTION/GLOBAL_RECRUITMENT'
								,ADMIN_CODE							VARCHAR2(20) PATH 'TRANSACTION/ADMIN_CODE'
								, INSTITUTE							VARCHAR2(30) PATH 'TRANSACTION/INSTITUTE'
								 ,ORG_INITS							VARCHAR2(30) PATH 'TRANSACTION/ORG_INITS'
								,PROPOSED_EFF_DATE				DATE PATH 'TRANSACTION/PROPOSED_EFF_DATE'
								 ,BRANCH_CHIEF						VARCHAR2(100) PATH 'TRANSACTION/BRANCH_CHIEF'
								 ,BRANCH_CHIEF_ID					VARCHAR2(10) PATH 'TRANSACTION/BRANCH_CHIEF_ID'
								 ,TEAM_LEADER						VARCHAR2(100) PATH 'TRANSACTION/TEAM_LEADER'
								 ,TEAM_LEADER_ID					VARCHAR2(10) PATH 'TRANSACTION/TEAM_LEADER_ID'
								,HR_SPECIALIST				  VARCHAR2(100) PATH  'TRANSACTION/HR_SPECIALIST'
								,HR_SPECIALIST_ID				VARCHAR2(50) PATH 'TRANSACTION/HR_SPECIALIST_ID'
								,HR_ASSISTANT						VARCHAR2(100) PATH 'TRANSACTION/HR_ASSISTANT'
								 ,HR_ASSISTANT_ID					VARCHAR2(10) PATH 'TRANSACTION/HR_ASSISTANT_ID'
								,HR_SPA								VARCHAR2(100) PATH 'TRANSACTION/HR_SPA'
								, HR_SPA_ID							VARCHAR2(10) PATH 'TRANSACTION/HR_SPA_ID'
								,PCKG_COMPLETE					VARCHAR2(3) PATH 'TRANSACTION/PCKG_COMPLETE'
								,MISSING_DOCS						varchar2(4000)  PATH 'TRANSACTION/MISSING_DOCS'
								 ,MISSING_DOCS_EMAIL_SENT_DATE	DATE PATH 'TRANSACTION/MISSING_DOCS_EMAIL_SENT_DATE'
								 ,MISSING_DOCS_RECEIPT_DATE		DATE PATH 'TRANSACTION/MISSING_DOCS_RECEIPT_DATE'
								 ,PRIORITY							VARCHAR2(10) PATH 'TRANSACTION/PRIORITY'
								,RYB_CODE               VARCHAR2(50) PATH 'TRANSACTION/RYB_CODE'
							    ,RYB_STATUS             VARCHAR2(50) PATH 'TRANSACTION/RYB_STATUS'
							    ,RYB_DESCRIPTION        VARCHAR2(50) PATH 'TRANSACTION/RYB_DESCRIPTION'
								,COMMENTS_STATUS					varchar2(4000)   PATH 'TRANSACTION/COMMENTS_STATUS'		
                ,JOB_OPENING_ID					VARCHAR2(20) PATH 'PRERECRUITMENT/JOB_OPENING_ID'
                ,DATE_JOB_OPENING_APPROVED		DATE  PATH 'PRERECRUITMENT/DATE_JOB_OPENING_APPROVED'
                ,CAN_NO								VARCHAR2(30) PATH 'PRERECRUITMENT/CAN_NO'
                ,TK_NO                VARCHAR2(30) PATH 'PRERECRUITMENT/TK_NO'
                ,SUBMITTED_PCKG_QLTY            VARCHAR2(10) PATH 'PRERECRUITMENT/SUBMITTED_PCKG_QUALITY'
                ,SUBMITTED_PCKG_QLTY_COMMENTS   varchar2(4000)      PATH 'PRERECRUITMENT/SUBMITTED_PCKG_QUALITY_CMNTS'
						) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
          TRG.ACTION_TYPE =  SRC.ACTION_TYPE 
          ,TRG.DATE_RECEIVED  = SRC.DATE_RECEIVED
          , TRG.DATE_SF52_RECEIVED = SRC.DATE_SF52_RECEIVED
          , TRG.GLOBAL_RECRUITMENT = SRC.GLOBAL_RECRUITMENT
         , TRG.ADMIN_CODE = SRC.ADMIN_CODE
          , TRG.INSTITUTE = SRC.INSTITUTE
          , TRG.ORG_INITS = SRC.ORG_INITS
          , TRG.PROPOSED_EFF_DATE =  SRC.PROPOSED_EFF_DATE
          , TRG.BRANCH_CHIEF = SRC.BRANCH_CHIEF
          , TRG.BRANCH_CHIEF_ID = SRC.BRANCH_CHIEF_ID
          , TRG.TEAM_LEADER = SRC.TEAM_LEADER
          , TRG.TEAM_LEADER_ID = SRC.TEAM_LEADER_ID
          , TRG.HR_SPECIALIST = SRC.HR_SPECIALIST
          , TRG.HR_SPECIALIST_ID = SRC.HR_SPECIALIST_ID
          , TRG.HR_ASSISTANT = SRC.HR_ASSISTANT
          , TRG.HR_ASSISTANT_ID = SRC.HR_ASSISTANT_ID
          , TRG.HR_SPA = SRC.HR_SPA 
          , TRG.HR_SPA_ID = SRC.HR_SPA_ID 
          , TRG.PCKG_COMPLETE = SRC.PCKG_COMPLETE
          , TRG.MISSING_DOCS = SRC.MISSING_DOCS
          , TRG.MISSING_DOCS_EMAIL_SENT_DATE = SRC.MISSING_DOCS_EMAIL_SENT_DATE
          , TRG.MISSING_DOCS_RECEIPT_DATE =  SRC.MISSING_DOCS_RECEIPT_DATE
          , TRG.PRIORITY = SRC.PRIORITY
          , TRG.RYB_CODE = SRC.RYB_CODE
          , TRG.RYB_STATUS = SRC.RYB_STATUS
          , TRG.RYB_DESCRIPTION = SRC.RYB_DESCRIPTION 
          ,TRG.COMMENTS_STATUS     = SRC.COMMENTS_STATUS    
          ,TRG.JOB_OPENING_ID = SRC.JOB_OPENING_ID		
          ,TRG.DATE_JOB_OPENING_APPROVED = SRC.DATE_JOB_OPENING_APPROVED
          ,TRG.CAN_NO = SRC.CAN_NO
          ,TRG.TK_NO = SRC.TK_NO
          ,TRG.SUBMITTED_PCKG_QLTY = SRC.SUBMITTED_PCKG_QLTY
          ,TRG.SUBMITTED_PCKG_QLTY_COMMENTS = SRC.SUBMITTED_PCKG_QLTY_COMMENTS
          WHEN NOT MATCHED THEN INSERT
              (
                TRG.TRANSACTION_ID
                ,TRG.ACTION_TYPE
                ,TRG.DATE_RECEIVED
                , TRG.DATE_SF52_RECEIVED
                , TRG.GLOBAL_RECRUITMENT
               , TRG.ADMIN_CODE
                , TRG.INSTITUTE
                , TRG.ORG_INITS
                , TRG.PROPOSED_EFF_DATE
                , TRG.BRANCH_CHIEF
                , TRG.BRANCH_CHIEF_ID
                , TRG.TEAM_LEADER
                , TRG.TEAM_LEADER_ID
                , TRG.HR_SPECIALIST
                , TRG.HR_SPECIALIST_ID
                , TRG.HR_ASSISTANT
                , TRG.HR_ASSISTANT_ID
                , TRG.HR_SPA 
                , TRG.HR_SPA_ID 
                , TRG.PCKG_COMPLETE
                , TRG.MISSING_DOCS
                , TRG.MISSING_DOCS_EMAIL_SENT_DATE
                , TRG.MISSING_DOCS_RECEIPT_DATE
                , TRG.PRIORITY
                , TRG.RYB_CODE
                , TRG.RYB_STATUS
                , TRG.RYB_DESCRIPTION 
                ,TRG.COMMENTS_STATUS   
                ,TRG.JOB_OPENING_ID	
                ,TRG.DATE_JOB_OPENING_APPROVED
                ,TRG.CAN_NO
                ,TRG.TK_NO
                ,TRG.SUBMITTED_PCKG_QLTY
                ,TRG.SUBMITTED_PCKG_QLTY_COMMENTS
              )
              VALUES
              (
                SRC.TRANSACTION_ID
                ,SRC.ACTION_TYPE
                ,SRC.DATE_RECEIVED
                , SRC.DATE_SF52_RECEIVED
                , SRC.GLOBAL_RECRUITMENT
               , SRC.ADMIN_CODE
                , SRC.INSTITUTE
                , SRC.ORG_INITS
                , SRC.PROPOSED_EFF_DATE
                , SRC.BRANCH_CHIEF
                , SRC.BRANCH_CHIEF_ID
                , SRC.TEAM_LEADER
                , SRC.TEAM_LEADER_ID
                , SRC.HR_SPECIALIST
                , SRC.HR_SPECIALIST_ID
                , SRC.HR_ASSISTANT
                , SRC.HR_ASSISTANT_ID
                , SRC.HR_SPA 
                , SRC.HR_SPA_ID 
                , SRC.PCKG_COMPLETE
                , SRC.MISSING_DOCS
                , SRC.MISSING_DOCS_EMAIL_SENT_DATE
                , SRC.MISSING_DOCS_RECEIPT_DATE
                , SRC.PRIORITY
                , SRC.RYB_CODE
                , SRC.RYB_STATUS
                , SRC.RYB_DESCRIPTION 
                ,SRC.COMMENTS_STATUS   
                ,SRC.JOB_OPENING_ID	
                ,SRC.DATE_JOB_OPENING_APPROVED
                ,SRC.CAN_NO
                ,SRC.TK_NO               
                ,SRC.SUBMITTED_PCKG_QLTY
                ,SRC.SUBMITTED_PCKG_QLTY_COMMENTS
              )
              ;
        
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, 'SP_UPDATE_MAIN_TABLE: Invalid data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
			END;
      
      BEGIN
				--------------------------------
				-- IC_REQUEST_INFO table
				--------------------------------
        
				MERGE INTO IC_REQUEST_INFO TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.FTE_LIAISON_FIRST_NAME
            ,X.FTE_LIAISON_LAST_NAME
            ,X.FTE_LIAISON_EMAIL
            ,X.PROGRAM_MGR_FIRST_NAME
            ,X.PROGRAM_MGR_LAST_NAME
            ,X.PROGRAM_MGR_EMAIL		
            ,X.SUPERVISOR_FIRST_NAME
            ,X.SUPERVISOR_LAST_NAME	
            ,X.SUPERVISOR_EMAIL			
           
         	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
                ,FTE_LIAISON_FIRST_NAME					VARCHAR2(30) PATH 'TRANSACTION/FTE_LIAISON_FIRST_NAME'
                ,FTE_LIAISON_LAST_NAME					VARCHAR2(30) PATH 'TRANSACTION/FTE_LIAISON_LAST_NAME'
                ,FTE_LIAISON_EMAIL						VARCHAR2(50) PATH 'TRANSACTION/FTE_LIAISON_EMAIL'
                ,PROGRAM_MGR_FIRST_NAME					VARCHAR2(30) PATH 'PRERECRUITMENT/PROGRAM_MGR_FIRST_NAME'
               ,PROGRAM_MGR_LAST_NAME					VARCHAR2(30) PATH 'PRERECRUITMENT/PROGRAM_MGR_LAST_NAME'
                ,PROGRAM_MGR_EMAIL						VARCHAR2(50) PATH 'PRERECRUITMENT/PROGRAM_MGR_EMAIL'
               ,SUPERVISOR_FIRST_NAME					VARCHAR2(30) PATH 'PRERECRUITMENT/SUPERVISOR_FIRST_NAME'
               ,SUPERVISOR_LAST_NAME					VARCHAR2(30) PATH 'PRERECRUITMENT/SUPERVISOR_LAST_NAME'
               ,SUPERVISOR_EMAIL							VARCHAR2(50) PATH 'PRERECRUITMENT/SUPERVISOR_EMAIL'
						) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
            TRG.FTE_LIAISON_FIRST_NAME = SRC.FTE_LIAISON_FIRST_NAME
            ,TRG.FTE_LIAISON_LAST_NAME = SRC.FTE_LIAISON_LAST_NAME
            ,TRG.FTE_LIAISON_EMAIL = SRC.FTE_LIAISON_EMAIL
            ,TRG.PROGRAM_MGR_FIRST_NAME =  SRC.PROGRAM_MGR_FIRST_NAME
            ,TRG.PROGRAM_MGR_LAST_NAME = SRC.PROGRAM_MGR_LAST_NAME
            ,TRG.PROGRAM_MGR_EMAIL = SRC.PROGRAM_MGR_EMAIL		
            ,TRG.SUPERVISOR_FIRST_NAME = SRC.SUPERVISOR_FIRST_NAME
            ,TRG.SUPERVISOR_LAST_NAME	= SRC.SUPERVISOR_LAST_NAME
            ,TRG.SUPERVISOR_EMAIL =	SRC.SUPERVISOR_EMAIL		         
          WHEN NOT MATCHED THEN INSERT
          (
            TRG.TRANSACTION_ID
            ,TRG.FTE_LIAISON_FIRST_NAME
            ,TRG.FTE_LIAISON_LAST_NAME
            ,TRG.FTE_LIAISON_EMAIL
            ,TRG.PROGRAM_MGR_FIRST_NAME
            ,TRG.PROGRAM_MGR_LAST_NAME
            ,TRG.PROGRAM_MGR_EMAIL		
            ,TRG.SUPERVISOR_FIRST_NAME
            ,TRG.SUPERVISOR_LAST_NAME	
            ,TRG.SUPERVISOR_EMAIL			
          )
          VALUES
          (
            SRC.TRANSACTION_ID
            ,SRC.FTE_LIAISON_FIRST_NAME
            ,SRC.FTE_LIAISON_LAST_NAME
            ,SRC.FTE_LIAISON_EMAIL
            ,SRC.PROGRAM_MGR_FIRST_NAME
            ,SRC.PROGRAM_MGR_LAST_NAME
            ,SRC.PROGRAM_MGR_EMAIL		
            ,SRC.SUPERVISOR_FIRST_NAME
            ,SRC.SUPERVISOR_LAST_NAME	
            ,SRC.SUPERVISOR_EMAIL			
          )
          ;
        
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, 'SP_UPDATE_IC_REQUEST_INFO_TABLE: Invalid data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
			END;
      
	   BEGIN
				--------------------------------
				-- RECRUITMENT table
				--------------------------------
        
				MERGE INTO RECRUITMENT TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.DATE_PRERECRUIT_MEETING
            ,X.DATE_PRERECRUIT_SHEET_SIGNED
            ,X.RECRUITMENT_TYPE
            ,X.DATE_NEED_VALIDATED
            ,X.LEGISLATIVE_INIT_SUPPORTED
            --,X.NUM_POSITIONS_TO_BE_ADV
            ,X.IS_NEW_POSITION
            ,X.IS_READVERTISEMENT
            ,X.RDR_PD_USED
            ,X.RDR_PD_KEY_NUMBER
            ,X.RELATED_CLASSIFICATION_NUMBER
            ,X.IS_TRANSITIONAL_RECRUIT
            ,X.OTHER_RECRUIT_CONSIDERATIONS
            ,X.PAID_AD
            ,X.CLEARANCE_LEVEL_REQUIRED
            ,X.PAID_AD_APPROVED_DATE
            ,X.IS_RELOCATION_EXPENSES_PAID
           ,X.INCENTIVES_OFFERED
           ,X.ADDITIONAL_RECRUIT_CHANNELS
           ,X.PRERECRUIT_COMMENTS
           
  
         	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
								,DATE_PRERECRUIT_MEETING					DATE  PATH 'PRERECRUITMENT/DATE_PRERECRUIT_MEETING'
								,DATE_PRERECRUIT_SHEET_SIGNED				DATE PATH 'PRERECRUITMENT/DATE_PRERECRUIT_SHEET_SIGNED'
								,RECRUITMENT_TYPE								VARCHAR2(50) PATH 'PRERECRUITMENT/RECRUITMENT_TYPE'
								,DATE_NEED_VALIDATED							DATE PATH 'PRERECRUITMENT/DATE_NEED_VALIDATED'
 								,LEGISLATIVE_INIT_SUPPORTED   VARCHAR2(50) PATH 'PRERECRUITMENT/LEGISLATIVE_INIT_SUPPORTED'
                --,NUM_POSITIONS_TO_BE_ADV					NUMBER(10)  PATH 'PRERECRUITMENT/NUM_POSITIONS_TO_BE_ADV'
								,IS_NEW_POSITION								VARCHAR2(3) PATH 'PRERECRUITMENT/IS_NEW_POSITION'
								,IS_READVERTISEMENT							VARCHAR2(3) PATH 'PRERECRUITMENT/IS_READVERTISEMENT'
								,RDR_PD_USED									VARCHAR2(3) PATH 'PRERECRUITMENT/HR_CARDS_PD_USED'
								,RDR_PD_KEY_NUMBER							VARCHAR2(50) PATH 'PRERECRUITMENT/HR_CARDS_PD_KEY_NUMBER'
								,RELATED_CLASSIFICATION_NUMBER			VARCHAR2(50) PATH 'PRERECRUITMENT/RELATED_CLASSIFICATION_NUMBER'
								,IS_TRANSITIONAL_RECRUIT					VARCHAR2(3) PATH 'PRERECRUITMENT/IS_TRANSITIONAL_RECRUIT'
								,OTHER_RECRUIT_CONSIDERATIONS		      VARCHAR2(25) PATH 'PRERECRUITMENT/OTHER_RECRUIT_CONSIDERATIONS'
								,PAID_AD											VARCHAR2(3) PATH 'PRERECRUITMENT/PAID_AD'
								,CLEARANCE_LEVEL_REQUIRED					VARCHAR2(30) PATH 'PRERECRUITMENT/CLEARANCE_LEVEL_REQUIRED'
								,PAID_AD_APPROVED_DATE						DATE PATH 'PRERECRUITMENT/PAID_AD_APPROVED_DATE'
								,IS_RELOCATION_EXPENSES_PAID				VARCHAR2(3) PATH 'PRERECRUITMENT/IS_RELOCATION_EXPENSES_PAID'
							,INCENTIVES_OFFERED							VARCHAR2(1000) PATH 'PRERECRUITMENT/INCENTIVES_OFFERED'
								,ADDITIONAL_RECRUIT_CHANNELS			   VARCHAR2(1000)  PATH 'PRERECRUITMENT/ADDITIONAL_RECRUIT_CHANNELS'
								,PRERECRUIT_COMMENTS							VARCHAR2(3000)  PATH 'PRERECRUITMENT/PRERECRUIT_COMMENTS'
                             
	
						) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
				  TRG.DATE_PRERECRUIT_MEETING = SRC.DATE_PRERECRUIT_MEETING
				 ,TRG.DATE_PRERECRUIT_SHEET_SIGNED = SRC.DATE_PRERECRUIT_SHEET_SIGNED
				  ,TRG.RECRUITMENT_TYPE = SRC.RECRUITMENT_TYPE
				  ,TRG.DATE_NEED_VALIDATED = SRC.DATE_NEED_VALIDATED
          ,TRG.LEGISLATIVE_INIT_SUPPORTED = SRC.LEGISLATIVE_INIT_SUPPORTED
				  --,TRG.NUM_POSITIONS_TO_BE_ADV = SRC.NUM_POSITIONS_TO_BE_ADV
				  ,TRG.IS_NEW_POSITION = SRC.IS_NEW_POSITION
				  ,TRG.IS_READVERTISEMENT = SRC.IS_READVERTISEMENT
				  ,TRG.RDR_PD_USED = SRC.RDR_PD_USED
				  ,TRG.RDR_PD_KEY_NUMBER = SRC.RDR_PD_KEY_NUMBER
				  ,TRG.RELATED_CLASSIFICATION_NUMBER = SRC.RELATED_CLASSIFICATION_NUMBER
				  ,TRG.IS_TRANSITIONAL_RECRUIT = SRC.IS_TRANSITIONAL_RECRUIT
				  ,TRG.OTHER_RECRUIT_CONSIDERATIONS = SRC.OTHER_RECRUIT_CONSIDERATIONS
				  ,TRG.PAID_AD =  SRC.PAID_AD
				  ,TRG.CLEARANCE_LEVEL_REQUIRED = SRC.CLEARANCE_LEVEL_REQUIRED
				  ,TRG.PAID_AD_APPROVED_DATE =  SRC.PAID_AD_APPROVED_DATE
				  ,TRG.IS_RELOCATION_EXPENSES_PAID = SRC.IS_RELOCATION_EXPENSES_PAID
				  ,TRG.INCENTIVES_OFFERED = SRC.INCENTIVES_OFFERED
				  ,TRG.ADDITIONAL_RECRUIT_CHANNELS = SRC.ADDITIONAL_RECRUIT_CHANNELS
				  ,TRG.PRERECRUIT_COMMENTS = SRC.PRERECRUIT_COMMENTS
          
        WHEN NOT MATCHED THEN INSERT
        (
          TRG.TRANSACTION_ID
          ,TRG.DATE_PRERECRUIT_MEETING
         ,TRG.DATE_PRERECRUIT_SHEET_SIGNED
          ,TRG.RECRUITMENT_TYPE
          ,TRG.DATE_NEED_VALIDATED
          ,TRG.LEGISLATIVE_INIT_SUPPORTED
          --,TRG.NUM_POSITIONS_TO_BE_ADV
          ,TRG.IS_NEW_POSITION
          ,TRG.IS_READVERTISEMENT
          ,TRG.RDR_PD_USED
          ,TRG.RDR_PD_KEY_NUMBER
          ,TRG.RELATED_CLASSIFICATION_NUMBER
          ,TRG.IS_TRANSITIONAL_RECRUIT
          ,TRG.OTHER_RECRUIT_CONSIDERATIONS
          ,TRG.PAID_AD
          ,TRG.CLEARANCE_LEVEL_REQUIRED
          ,TRG.PAID_AD_APPROVED_DATE
          ,TRG.IS_RELOCATION_EXPENSES_PAID
          ,TRG.INCENTIVES_OFFERED
          ,TRG.ADDITIONAL_RECRUIT_CHANNELS
          ,TRG.PRERECRUIT_COMMENTS
          
        )
        VALUES
        (
          SRC.TRANSACTION_ID
        ,SRC.DATE_PRERECRUIT_MEETING
        ,SRC.DATE_PRERECRUIT_SHEET_SIGNED
        ,SRC.RECRUITMENT_TYPE
        ,SRC.DATE_NEED_VALIDATED
        ,SRC.LEGISLATIVE_INIT_SUPPORTED
        --,SRC.NUM_POSITIONS_TO_BE_ADV
        ,SRC.IS_NEW_POSITION
        ,SRC.IS_READVERTISEMENT
        ,SRC.RDR_PD_USED
        ,SRC.RDR_PD_KEY_NUMBER
        ,SRC.RELATED_CLASSIFICATION_NUMBER
        ,SRC.IS_TRANSITIONAL_RECRUIT
        ,SRC.OTHER_RECRUIT_CONSIDERATIONS
        ,SRC.PAID_AD
        ,SRC.CLEARANCE_LEVEL_REQUIRED
        ,SRC.PAID_AD_APPROVED_DATE
        ,SRC.IS_RELOCATION_EXPENSES_PAID
        ,SRC.INCENTIVES_OFFERED
        ,SRC.ADDITIONAL_RECRUIT_CHANNELS
        ,SRC.PRERECRUIT_COMMENTS
        

      )
      ;      
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, 'SP_UPDATE_RECRUITMENT_TABLE: Invalid TRANSACTION data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
			END;
    ----------------------------------------
    -- Multi Select Insert
    -------------------------------------------
    ---SP_UPDATE_MULTI_SELECT(I_TRANSACTIONID, I_FORM_NAME, I_FIELD_NAME, I_TABLE_NAME);
    
    SP_UPDATE_MULTI_SELECT(I_TRANSACTIONID, 'RECRUITMENT', 'INCENTIVES_OFFERED', 'RECRUITMENT');
    SP_UPDATE_MULTI_SELECT(I_TRANSACTIONID, 'RECRUITMENT', 'ADDITIONAL_RECRUIT_CHANNELS', 'RECRUITMENT');
	
      BEGIN  
      	--------------------------------
				-- MAIN table
				--------------------------------
        
        V_XMLVALUE :=I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/UPDATE_STATUS/text()');
        IF V_XMLVALUE IS NOT NULL THEN
          V_UPDATESTATUS := V_XMLVALUE.GETSTRINGVAL();
          IF V_UPDATESTATUS = 'true' THEN
            V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/STATUS/text()');
            V_STATUS := V_XMLVALUE.GETSTRINGVAL();
            V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/STATUS_DATE/text()');
            V_VALUE := V_XMLVALUE.GETSTRINGVAL();
            V_STATUSDATE := TO_DATE(V_VALUE,'YYYY/MM/DD HH24:MI:SS');
            V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/STATUS_USER_ID/text()');
            V_STATUSUSERID := V_XMLVALUE.GETSTRINGVAL();
            
            UPDATE MAIN SET STATUS = V_STATUS, STATUS_DATE = V_STATUSDATE, STATUS_USER_ID = V_STATUSUSERID 
            WHERE TRANSACTION_ID = I_TRANSACTIONID;
          END IF;   
        END IF;
        V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/UPDATE_RYB/text()');
        IF V_XMLVALUE IS NOT NULL THEN
          V_UPDATERYB := V_XMLVALUE.GETSTRINGVAL();
          IF V_UPDATERYB = 'true' THEN
            V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/RYB_CODE/text()');
            V_RYBCODE := V_XMLVALUE.GETSTRINGVAL();
            V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/RYB_STATUS/text()');
            V_RYBSTATUS := V_XMLVALUE.GETSTRINGVAL();
            V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/RYB_DESC/text()');
            V_RYBDESC := V_XMLVALUE.GETSTRINGVAL();
           
            UPDATE MAIN SET RYB_CODE = V_RYBCODE, RYB_STATUS = V_RYBSTATUS, RYB_DESCRIPTION = V_RYBDESC 
            WHERE TRANSACTION_ID = I_TRANSACTIONID;
          END IF;
        END IF;
        
      END;
   

		END IF;

	EXCEPTION
		WHEN E_INVALID_PROCID THEN
			SP_ERROR_LOG();
			--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing SP_UPDATE_RECRUITMENT_PROCESS -------------------');
			--DBMS_OUTPUT.PUT_LINE('ERROR message = ' || 'Process ID is not valid');
		WHEN OTHERS THEN
			SP_ERROR_LOG();
			V_ERRCODE := SQLCODE;
			V_ERRMSG := SQLERRM;
			--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing SP_UPDATE_RECRUITMENT_PROCESS -------------------');
			--DBMS_OUTPUT.PUT_LINE('Error code    = ' || V_ERRCODE);
			--DBMS_OUTPUT.PUT_LINE('Error message = ' || V_ERRMSG);
	END;
/
--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_APPOINTMENT_PROCESS
--------------------------------------------------------

create or replace PROCEDURE SP_UPDATE_APPOINTMENT_PROCESS
	(
	I_TRANSACTIONID IN NUMBER
 , I_FIELD_DATA      IN      XMLTYPE
	)
	IS
		V_CLOBVALUE                 CLOB;
		V_VALUE                     NVARCHAR2(4000);
		V_VALUE_LOOKUP              NVARCHAR2(2000);
		V_XMLDOC                    XMLTYPE;
		V_XMLVALUE                  XMLTYPE;
		V_ERRCODE                   NUMBER(10);
		V_ERRMSG                    VARCHAR2(512);
		E_INVALID_PROCID            EXCEPTION;
    V_STATUS                    NVARCHAR2(10);
    V_STATUSDATE                NVARCHAR2(20);
    V_STATUSUSERID              NVARCHAR2(50);
    V_MULTI_CNT         NUMBER(10);
    V_UPDATERYB                 VARCHAR2(5);
    V_RYBCODE                   VARCHAR2(50);
    V_RYBSTATUS                 VARCHAR2(50);
    V_RYBDESC                   VARCHAR2(100);
    V_UPDATESPA                 VARCHAR2(4);
	
	BEGIN
		DBMS_OUTPUT.PUT_LINE('SP_UPDATE_APPOINTMENT_PROCESS - BEGIN ============================');
		DBMS_OUTPUT.PUT_LINE('PARAMETERS ----------------');
		DBMS_OUTPUT.PUT_LINE(' ----------------');
    
		V_XMLDOC := I_FIELD_DATA;
		IF I_TRANSACTIONID IS NOT NULL AND I_TRANSACTIONID > 0 THEN
			------------------------------------------------------

			------------------------------------------------------
			--DBMS_OUTPUT.PUT_LINE('Starting xml data retrieval and table update ----------');
			
      BEGIN
				--------------------------------
				-- MAIN table
				--------------------------------
        
				MERGE INTO MAIN TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.ACTION_TYPE
            ,X.DATE_RECEIVED
					  , X.DATE_SF52_RECEIVED
						, X.GLOBAL_RECRUITMENT
						, X.ADMIN_CODE
						, X.INSTITUTE
						, X.ORG_INITS
						, X.PROPOSED_EFF_DATE
						, X.BRANCH_CHIEF
						, X.BRANCH_CHIEF_ID
						, X.TEAM_LEADER
						, X.TEAM_LEADER_ID
						, X.HR_SPECIALIST
						, X.HR_SPECIALIST_ID
						, X.HR_ASSISTANT
						, X.HR_ASSISTANT_ID				
						, X.HR_SPA
						, X.HR_SPA_ID
						, X.PCKG_COMPLETE
						, X.MISSING_DOCS
						, X.MISSING_DOCS_EMAIL_SENT_DATE
						, X.MISSING_DOCS_RECEIPT_DATE
						, X.PRIORITY
						, X.RYB_CODE
						, X.RYB_STATUS
						, X.RYB_DESCRIPTION
						, X.COMMENTS_STATUS     
            , X.JOB_OPENING_ID
 						, X.CAN_NO   
            --,SERVICING_TEAM_LEADER
           -- ,SERVICING_TEAM_LEADER_ID
         	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
                ,ACTION_TYPE				    VARCHAR2(50) PATH 'TRANSACTION/ACTION_TYPE'
  				  		,DATE_RECEIVED						DATE PATH 'TRANSACTION/DATE_RECEIVED'
	    					 ,DATE_SF52_RECEIVED				DATE PATH 'TRANSACTION/DATE_SF52_RECEIVED'
								,GLOBAL_RECRUITMENT			VARCHAR2(3) PATH 'TRANSACTION/GLOBAL_RECRUITMENT'
								,ADMIN_CODE							VARCHAR2(20) PATH 'TRANSACTION/ADMIN_CODE'
								, INSTITUTE							VARCHAR2(30) PATH 'TRANSACTION/INSTITUTE'
								 ,ORG_INITS							VARCHAR2(30) PATH 'TRANSACTION/ORG_INITS'
								,PROPOSED_EFF_DATE				DATE PATH 'TRANSACTION/PROPOSED_EFF_DATE'
								 ,BRANCH_CHIEF						VARCHAR2(100) PATH 'TRANSACTION/BRANCH_CHIEF'
								 ,BRANCH_CHIEF_ID					VARCHAR2(10) PATH 'TRANSACTION/BRANCH_CHIEF_ID'
								 ,TEAM_LEADER						VARCHAR2(100) PATH 'TRANSACTION/TEAM_LEADER'
								 ,TEAM_LEADER_ID					VARCHAR2(10) PATH 'TRANSACTION/TEAM_LEADER_ID'
								,HR_SPECIALIST				  VARCHAR2(100) PATH  'TRANSACTION/HR_SPECIALIST'
								,HR_SPECIALIST_ID				VARCHAR2(50) PATH 'TRANSACTION/HR_SPECIALIST_ID'
								,HR_ASSISTANT						VARCHAR2(100) PATH 'TRANSACTION/HR_ASSISTANT'
								 ,HR_ASSISTANT_ID					VARCHAR2(10) PATH 'TRANSACTION/HR_ASSISTANT_ID'
								,HR_SPA								VARCHAR2(100) PATH 'TRANSACTION/HR_SPA'
								, HR_SPA_ID							VARCHAR2(10) PATH 'TRANSACTION/HR_SPA_ID'
								,PCKG_COMPLETE						VARCHAR2(3) PATH 'TRANSACTION/PCKG_COMPLETE'
								,MISSING_DOCS						varchar2(4000)  PATH 'TRANSACTION/MISSING_DOCS'
								 ,MISSING_DOCS_EMAIL_SENT_DATE	DATE PATH 'TRANSACTION/MISSING_DOCS_EMAIL_SENT_DATE'
								 ,MISSING_DOCS_RECEIPT_DATE		DATE PATH 'TRANSACTION/MISSING_DOCS_RECEIPT_DATE'
								 ,PRIORITY							VARCHAR2(10) PATH 'TRANSACTION/PRIORITY'
								,RYB_CODE               VARCHAR2(50) PATH 'TRANSACTION/RYB_CODE'
							    ,RYB_STATUS             VARCHAR2(50) PATH 'TRANSACTION/RYB_STATUS'
							    ,RYB_DESCRIPTION        VARCHAR2(50) PATH 'TRANSACTION/RYB_DESCRIPTION'
								,COMMENTS_STATUS					varchar2(4000)   PATH 'TRANSACTION/COMMENTS_STATUS'		
                ,JOB_OPENING_ID					VARCHAR2(20) PATH 'APPOINTMENT/A_CAP_HR_JOB_REQ'
                ,CAN_NO								VARCHAR2(30) PATH 'APPOINTMENT/A_CAN'
                --,SERVICING_TEAM_LEADER  VARCHAR2(100) PATH 'ORIENTATION/????'
                -- ,SERVICING_TEAM_LEADER_ID   VARCHAR2(10) PATH 'ORIENTATION/O_STL'
						) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
          TRG.ACTION_TYPE =  SRC.ACTION_TYPE 
          ,TRG.DATE_RECEIVED  = SRC.DATE_RECEIVED
          , TRG.DATE_SF52_RECEIVED = SRC.DATE_SF52_RECEIVED
          , TRG.GLOBAL_RECRUITMENT = SRC.GLOBAL_RECRUITMENT
         , TRG.ADMIN_CODE = SRC.ADMIN_CODE
          , TRG.INSTITUTE = SRC.INSTITUTE
          , TRG.ORG_INITS = SRC.ORG_INITS
          , TRG.PROPOSED_EFF_DATE =  SRC.PROPOSED_EFF_DATE
          , TRG.BRANCH_CHIEF = SRC.BRANCH_CHIEF
          , TRG.BRANCH_CHIEF_ID = SRC.BRANCH_CHIEF_ID
          , TRG.TEAM_LEADER = SRC.TEAM_LEADER
          , TRG.TEAM_LEADER_ID = SRC.TEAM_LEADER_ID
          , TRG.HR_SPECIALIST = SRC.HR_SPECIALIST
          , TRG.HR_SPECIALIST_ID = SRC.HR_SPECIALIST_ID
          , TRG.HR_ASSISTANT = SRC.HR_ASSISTANT
          , TRG.HR_ASSISTANT_ID = SRC.HR_ASSISTANT_ID
          , TRG.HR_SPA = SRC.HR_SPA 
          , TRG.HR_SPA_ID = SRC.HR_SPA_ID 
          , TRG.PCKG_COMPLETE = SRC.PCKG_COMPLETE
          , TRG.MISSING_DOCS = SRC.MISSING_DOCS
          , TRG.MISSING_DOCS_EMAIL_SENT_DATE = SRC.MISSING_DOCS_EMAIL_SENT_DATE
          , TRG.MISSING_DOCS_RECEIPT_DATE =  SRC.MISSING_DOCS_RECEIPT_DATE
          , TRG.PRIORITY = SRC.PRIORITY
          , TRG.RYB_CODE = SRC.RYB_CODE
          , TRG.RYB_STATUS = SRC.RYB_STATUS
          , TRG.RYB_DESCRIPTION = SRC.RYB_DESCRIPTION 
          ,TRG.COMMENTS_STATUS     = SRC.COMMENTS_STATUS    
          ,TRG.JOB_OPENING_ID = SRC.JOB_OPENING_ID		
          ,TRG.CAN_NO = SRC.CAN_NO
          --,TRG.SERVICING_TEAM_LEADER = SRC.SERVICING_TEAM_LEADER
          --,TRG.SERVICING_TEAM_LEADER_ID = SRC.SERVICING_TEAM_LEADER_ID
          WHEN NOT MATCHED THEN INSERT
              (
                TRG.TRANSACTION_ID
                ,TRG.ACTION_TYPE
                ,TRG.DATE_RECEIVED
                , TRG.DATE_SF52_RECEIVED
                , TRG.GLOBAL_RECRUITMENT
               , TRG.ADMIN_CODE
                , TRG.INSTITUTE
                , TRG.ORG_INITS
                , TRG.PROPOSED_EFF_DATE
                , TRG.BRANCH_CHIEF
                , TRG.BRANCH_CHIEF_ID
                , TRG.TEAM_LEADER
                , TRG.TEAM_LEADER_ID
                , TRG.HR_SPECIALIST
                , TRG.HR_SPECIALIST_ID
                , TRG.HR_ASSISTANT
                , TRG.HR_ASSISTANT_ID
                , TRG.HR_SPA 
                , TRG.HR_SPA_ID 
                , TRG.PCKG_COMPLETE
                , TRG.MISSING_DOCS
                , TRG.MISSING_DOCS_EMAIL_SENT_DATE
                , TRG.MISSING_DOCS_RECEIPT_DATE
                , TRG.PRIORITY
                , TRG.RYB_CODE
                , TRG.RYB_STATUS
                , TRG.RYB_DESCRIPTION 
                ,TRG.COMMENTS_STATUS   
                ,TRG.JOB_OPENING_ID	
                ,TRG.CAN_NO
                --,TRG.SERVICING_TEAM_LEADER
                --,TRG.SERVICING_TEAM_LEADER_ID
              )
              VALUES
              (
                SRC.TRANSACTION_ID
                ,SRC.ACTION_TYPE
                ,SRC.DATE_RECEIVED
                , SRC.DATE_SF52_RECEIVED
                , SRC.GLOBAL_RECRUITMENT
               , SRC.ADMIN_CODE
                , SRC.INSTITUTE
                , SRC.ORG_INITS
                , SRC.PROPOSED_EFF_DATE
                , SRC.BRANCH_CHIEF
                , SRC.BRANCH_CHIEF_ID
                , SRC.TEAM_LEADER
                , SRC.TEAM_LEADER_ID
                , SRC.HR_SPECIALIST
                , SRC.HR_SPECIALIST_ID
                , SRC.HR_ASSISTANT
                , SRC.HR_ASSISTANT_ID
                , SRC.HR_SPA 
                , SRC.HR_SPA_ID 
                , SRC.PCKG_COMPLETE
                , SRC.MISSING_DOCS
                , SRC.MISSING_DOCS_EMAIL_SENT_DATE
                , SRC.MISSING_DOCS_RECEIPT_DATE
                , SRC.PRIORITY
                , SRC.RYB_CODE
                , SRC.RYB_STATUS
                , SRC.RYB_DESCRIPTION 
                ,SRC.COMMENTS_STATUS   
                ,SRC.JOB_OPENING_ID	
                ,SRC.CAN_NO
                --,SRC.SERVICING_TEAM_LEADER
                --,SRC.SERVICING_TEAM_LEADER_ID
              )
              ;
        
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, 'UPDATE MAIN TABLE: Invalid data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
			END;
      
      BEGIN
				--------------------------------
				-- IC_REQUEST_INFO table
				--------------------------------
        
				MERGE INTO IC_REQUEST_INFO TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.FTE_LIAISON_FIRST_NAME
            ,X.FTE_LIAISON_LAST_NAME
            ,X.FTE_LIAISON_EMAIL
           ,X.SUPERVISOR_FIRST_NAME
            ,X.SUPERVISOR_LAST_NAME	
            ,X.SUPERVISOR_EMAIL			
           
         	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
                ,FTE_LIAISON_FIRST_NAME					VARCHAR2(30) PATH 'TRANSACTION/FTE_LIAISON_FIRST_NAME'
                ,FTE_LIAISON_LAST_NAME					VARCHAR2(30) PATH 'TRANSACTION/FTE_LIAISON_LAST_NAME'
                ,FTE_LIAISON_EMAIL						VARCHAR2(50) PATH 'TRANSACTION/FTE_LIAISON_EMAIL'
               ,SUPERVISOR_FIRST_NAME					VARCHAR2(30) PATH 'APPOINTMENT/A_SV_FIRSTNAME'
               ,SUPERVISOR_LAST_NAME					VARCHAR2(30) PATH 'APPOINTMENT/A_SV_LASTNAME'
               ,SUPERVISOR_EMAIL							VARCHAR2(50) PATH 'APPOINTMENT/A_SV_EMAIL'
						) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
            TRG.FTE_LIAISON_FIRST_NAME = SRC.FTE_LIAISON_FIRST_NAME
            ,TRG.FTE_LIAISON_LAST_NAME = SRC.FTE_LIAISON_LAST_NAME
            ,TRG.FTE_LIAISON_EMAIL = SRC.FTE_LIAISON_EMAIL
             ,TRG.SUPERVISOR_FIRST_NAME = SRC.SUPERVISOR_FIRST_NAME
            ,TRG.SUPERVISOR_LAST_NAME	= SRC.SUPERVISOR_LAST_NAME
            ,TRG.SUPERVISOR_EMAIL =	SRC.SUPERVISOR_EMAIL		         
          WHEN NOT MATCHED THEN INSERT
          (
            TRG.TRANSACTION_ID
            ,TRG.FTE_LIAISON_FIRST_NAME
            ,TRG.FTE_LIAISON_LAST_NAME
            ,TRG.FTE_LIAISON_EMAIL
        ,TRG.SUPERVISOR_FIRST_NAME
            ,TRG.SUPERVISOR_LAST_NAME	
            ,TRG.SUPERVISOR_EMAIL			
          )
          VALUES
          (
            SRC.TRANSACTION_ID
            ,SRC.FTE_LIAISON_FIRST_NAME
            ,SRC.FTE_LIAISON_LAST_NAME
            ,SRC.FTE_LIAISON_EMAIL
          ,SRC.SUPERVISOR_FIRST_NAME
            ,SRC.SUPERVISOR_LAST_NAME	
            ,SRC.SUPERVISOR_EMAIL			
          )
          ;
        
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, ' UPDATE IC_REQUEST_INFO TABLE: Invalid data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
			END;
      
      BEGIN
				--------------------------------
				-- ANNOUNCEMENT table
				--------------------------------
        
				MERGE INTO ANNOUNCEMENT TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.VIN
            ,X.ANN_NUMBER
        	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
                ,VIN				VARCHAR2(40) PATH 'APPOINTMENT/A_RELATE_RECR_REQ'
                ,ANN_NUMBER VARCHAR2(40) PATH 'APPOINTMENT/A_ANNOUNCEMENT'
						) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
            TRG.VIN = SRC.VIN
            ,TRG.ANN_NUMBER = SRC.ANN_NUMBER     
          WHEN NOT MATCHED THEN INSERT
          (
            TRG.TRANSACTION_ID
           ,TRG.VIN
           ,TRG.ANN_NUMBER
          )
          VALUES
          (
            SRC.TRANSACTION_ID
            ,SRC.VIN
            ,SRC.ANN_NUMBER
          )
          ;
        
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, ' UPDATE ANNOUNCEMENT TABLE: Invalid data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
			END;
      
      BEGIN
				--------------------------------
				-- PERSON_INFO table
				--------------------------------
        
				MERGE INTO PERSON_INFO TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.CURRENT_EMPLOYEE    
            ,X.FIRST_NAME
            ,X.LAST_NAME
            ,X.EMPLOYEE_ID
            ,X.EMAIL
            ,X.SUPERVISORY_STATUS
            ,X.FILER278
            ,X.FILER450
            ,X.BOARD_CRTFCN
    	    ,X.CAPHR_EFFECTIVE_DATE
            ,X.CAPHR_PROCESSED_DATE

         	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
                ,CURRENT_EMPLOYEE   VARCHAR2(3)     PATH 'APPOINTMENT/CURRENT_NIH_EMPLOYEE'
                ,FIRST_NAME         VARCHAR2(30)    PATH 'APPOINTMENT/FIRST_NAME'
                ,LAST_NAME          VARCHAR2(30)    PATH 'APPOINTMENT/LAST_NAME'
                ,EMPLOYEE_ID        VARCHAR2(20)    PATH 'APPOINTMENT/EMPLOYEE_ID'
                ,EMAIL        VARCHAR2(50)    PATH 'APPOINTMENT/A_EMP_EMAIL'
                ,SUPERVISORY_STATUS VARCHAR2(3)     PATH 'APPOINTMENT/A_SP_STATUS'
                ,FILER278           VARCHAR2(3)     PATH 'APPOINTMENT/FILER278'
                ,FILER450            VARCHAR2(3)     PATH 'APPOINTMENT/FILER450'
                ,BOARD_CRTFCN        VARCHAR2(50)    PATH 'APPOINTMENT/BOARD_CRTFCN'
                ,CAPHR_EFFECTIVE_DATE   DATE PATH 'FINALPROCESSING/CAPHR_EFFECTIVE_DATE'
                ,CAPHR_PROCESSED_DATE   DATE PATH 'FINALPROCESSING/CAPHR_PROCESSED_DATE'
						) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
          TRG.CURRENT_EMPLOYEE = SRC.CURRENT_EMPLOYEE
          ,TRG.FIRST_NAME = SRC.FIRST_NAME
          ,TRG.LAST_NAME = SRC.LAST_NAME
          ,TRG.EMPLOYEE_ID = SRC.EMPLOYEE_ID
          ,TRG.EMAIL = SRC.EMAIL
          ,TRG.SUPERVISORY_STATUS = SRC.SUPERVISORY_STATUS
          ,TRG.FILER278 = SRC.FILER278
          ,TRG.FILER450 = SRC.FILER450
          ,TRG.BOARD_CRTFCN = SRC.BOARD_CRTFCN
          ,TRG.CAPHR_EFFECTIVE_DATE = SRC.CAPHR_EFFECTIVE_DATE
          ,TRG.CAPHR_PROCESSED_DATE = SRC.CAPHR_PROCESSED_DATE
          WHEN NOT MATCHED THEN INSERT
          (
            TRG.TRANSACTION_ID
            ,TRG.CURRENT_EMPLOYEE
            ,TRG.FIRST_NAME
            ,TRG.LAST_NAME
            ,TRG.EMPLOYEE_ID
            ,TRG.EMAIL
            ,TRG.SUPERVISORY_STATUS
            ,TRG.FILER278
            ,TRG.FILER450
            ,TRG.BOARD_CRTFCN
            ,TRG.CAPHR_EFFECTIVE_DATE
            ,TRG.CAPHR_PROCESSED_DATE
          )
          VALUES
          (
            SRC.TRANSACTION_ID
            ,SRC.CURRENT_EMPLOYEE
            ,SRC.FIRST_NAME
            ,SRC.LAST_NAME
            ,SRC.EMPLOYEE_ID
            ,SRC.EMAIL
            ,SRC.SUPERVISORY_STATUS
            ,SRC.FILER278
            ,SRC.FILER450
            ,SRC.BOARD_CRTFCN
            ,SRC.CAPHR_EFFECTIVE_DATE
            ,SRC.CAPHR_PROCESSED_DATE
          )
          ;
        
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, 'UPDATE PERSON_INFO TABLE: Invalid data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
			END;
      
      BEGIN
				--------------------------------
				-- CERTIFICATE table
				--------------------------------
        
				MERGE INTO CERTIFICATE TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.ANN_NUMBER
            ,X.CERT_NUMBER
            ,X.CERT_TYPE
            ,X.DATE_CERT_TO_SO
            ,X.DATE_OF_HIRING_DECISION
            ,X.DATE_HIRING_DEC_RECD_IN_HR
            ,X.DATE_CERT_EXPIRES
         	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
              ,ANN_NUMBER           VARCHAR2(40)     PATH 'APPOINTMENT/A_ANNOUNCEMENT'
              ,CERT_NUMBER          VARCHAR2(40)     PATH 'APPOINTMENT/A_CERTIFICATE_NO'
              ,CERT_TYPE            VARCHAR2(20)     PATH 'APPOINTMENT/A_CERTIFICATE_TYPE'
              ,DATE_CERT_TO_SO          DATE         PATH 'APPOINTMENT/A_DATE_CERT_SNT_SEL'
              ,DATE_OF_HIRING_DECISION  DATE         PATH 'APPOINTMENT/A_DATE_HIR_DEC'
              ,DATE_HIRING_DEC_RECD_IN_HR    DATE    PATH 'APPOINTMENT/A_DATE_HIR_DEC_HR'
              ,DATE_CERT_EXPIRES            DATE PATH 'APPOINTMENT/A_CERT_EXPIRE_DATE'
						) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
            TRG.ANN_NUMBER = SRC.ANN_NUMBER
            ,TRG.CERT_NUMBER = SRC.CERT_NUMBER
            ,TRG.CERT_TYPE = SRC.CERT_TYPE
            ,TRG.DATE_CERT_TO_SO = SRC.DATE_CERT_TO_SO
            ,TRG.DATE_OF_HIRING_DECISION = SRC.DATE_OF_HIRING_DECISION
            ,TRG.DATE_HIRING_DEC_RECD_IN_HR = SRC.DATE_HIRING_DEC_RECD_IN_HR
            ,TRG.DATE_CERT_EXPIRES = SRC.DATE_CERT_EXPIRES
        WHEN NOT MATCHED THEN INSERT
          (
            TRG.TRANSACTION_ID
            ,TRG.ANN_NUMBER
            ,TRG.CERT_NUMBER
            ,TRG.CERT_TYPE
            ,TRG.DATE_CERT_TO_SO
            ,TRG.DATE_OF_HIRING_DECISION
            ,TRG.DATE_HIRING_DEC_RECD_IN_HR
            ,TRG.DATE_CERT_EXPIRES
         )
          VALUES
          (
            SRC.TRANSACTION_ID
            ,SRC.ANN_NUMBER
            ,SRC.CERT_NUMBER
            ,SRC.CERT_TYPE
            ,SRC.DATE_CERT_TO_SO
            ,SRC.DATE_OF_HIRING_DECISION
            ,SRC.DATE_HIRING_DEC_RECD_IN_HR
            ,SRC.DATE_CERT_EXPIRES
          )
          ;
        
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, 'UPDATE CERTIFICATE TABLE: Invalid data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
			END;
    
      BEGIN
				--------------------------------
				-- NEW_POSITION table
				--------------------------------
        
				MERGE INTO NEW_POSITION TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.POSITION_TITLE
            ,X.PAY_PLAN
            ,X.SERIES
            ,X.GRADE
            ,X.FULL_PERF_LEVEL
            ,X.STEP
            ,X.PAY_TIER
            ,X.PAY_BAND
            ,X.JOB_CODE
            ,X.POSITION_NO
            ,X.DUTY_LOCATION
            ,X.DUTY_LOCATION_CODE
            ,X.BASIC_PAY_MIN
            ,X.BASIC_PAY_MAX
            ,X.PROFESSIONAL_DESIGNATION
            ,X.ELIGIBLE_FOR_BENEFITS
            ,X.NTE_DATE
            ,X.CATEGORY
        	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
                ,POSITION_TITLE				VARCHAR2(100) PATH 'APPOINTMENT/A_POSITION_TITL'
               ,PAY_PLAN              VARCHAR2(100) PATH 'APPOINTMENT/A_PAY_PLAN'
               ,SERIES                VARCHAR2(30) PATH 'APPOINTMENT/A_SERIES'
               ,GRADE                   VARCHAR2(30) PATH 'APPOINTMENT/A_GRADE'
               ,FULL_PERF_LEVEL         VARCHAR2(50) PATH 'APPOINTMENT/A_FPL'
               ,STEP                     VARCHAR2(30) PATH 'APPOINTMENT/STEP'
               ,PAY_TIER                VARCHAR2(30) PATH 'APPOINTMENT/PAY_TIER'
              ,PAY_BAND                 VARCHAR2(30) PATH 'APPOINTMENT/PAY_BAND'
              ,JOB_CODE               VARCHAR2(30) PATH 'APPOINTMENT/A_JOB_CODE'
              ,POSITION_NO            VARCHAR2(20) PATH 'APPOINTMENT/POSITION_NO'
              ,DUTY_LOCATION          VARCHAR2(250) PATH 'APPOINTMENT/A_DUTY_STATION'
              ,DUTY_LOCATION_CODE     VARCHAR2(20) PATH 'APPOINTMENT/A_DUTY_CODE'
              ,BASIC_PAY_MIN          NUMBER(11) PATH 'APPOINTMENT/BASIC_PAY_MIN'
              ,BASIC_PAY_MAX          NUMBER(11) PATH 'APPOINTMENT/BASIC_PAY_MAX'
              ,PROFESSIONAL_DESIGNATION VARCHAR2(50) PATH 'APPOINTMENT/PROFESSIONAL_DESIGNATION'
              ,ELIGIBLE_FOR_BENEFITS      VARCHAR2(3) PATH 'APPOINTMENT/ELIGIBLE_FOR_BENEFITS'
              ,NTE_DATE                 DATE PATH 'APPOINTMENT/NTE_DATE'
              ,CATEGORY                 VARCHAR2(30) PATH 'APPOINTMENT/A_CATEGORY'
						) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
          TRG.POSITION_TITLE = SRC.POSITION_TITLE
         ,TRG.PAY_PLAN = SRC.PAY_PLAN
         ,TRG.SERIES = SRC.SERIES
         ,TRG.GRADE = SRC.GRADE
         ,TRG.FULL_PERF_LEVEL = SRC.FULL_PERF_LEVEL
         ,TRG.STEP = SRC.STEP
         ,TRG.PAY_TIER = SRC.PAY_TIER
          ,TRG.PAY_BAND = SRC.PAY_BAND
          ,TRG.JOB_CODE = SRC.JOB_CODE
          ,TRG.POSITION_NO = SRC.POSITION_NO
          ,TRG.DUTY_LOCATION = SRC.DUTY_LOCATION
          ,TRG.DUTY_LOCATION_CODE = SRC.DUTY_LOCATION_CODE
          ,TRG.BASIC_PAY_MIN = SRC.BASIC_PAY_MIN
          ,TRG.BASIC_PAY_MAX = SRC.BASIC_PAY_MAX
          ,TRG.PROFESSIONAL_DESIGNATION = SRC.PROFESSIONAL_DESIGNATION
          ,TRG.ELIGIBLE_FOR_BENEFITS = SRC.ELIGIBLE_FOR_BENEFITS
          ,TRG.NTE_DATE = SRC.NTE_DATE
          ,TRG.CATEGORY = SRC.CATEGORY
          WHEN NOT MATCHED THEN INSERT
          (
            TRG.TRANSACTION_ID
            ,TRG.POSITION_TITLE
            ,TRG.PAY_PLAN
            ,TRG.SERIES
            ,TRG.GRADE
            ,TRG.FULL_PERF_LEVEL
            ,TRG.STEP
            ,TRG.PAY_TIER
            ,TRG.PAY_BAND
            ,TRG.JOB_CODE
            ,TRG.POSITION_NO
            ,TRG.DUTY_LOCATION
            ,TRG.DUTY_LOCATION_CODE
            ,TRG.BASIC_PAY_MIN
            ,TRG.BASIC_PAY_MAX
            ,TRG.PROFESSIONAL_DESIGNATION
            ,TRG.ELIGIBLE_FOR_BENEFITS
            ,TRG.NTE_DATE
            ,TRG.CATEGORY
          )
          VALUES
          (
            SRC.TRANSACTION_ID
            ,SRC.POSITION_TITLE
            ,SRC.PAY_PLAN
            ,SRC.SERIES
            ,SRC.GRADE
            ,SRC.FULL_PERF_LEVEL
            ,SRC.STEP
            ,SRC.PAY_TIER
            ,SRC.PAY_BAND
            ,SRC.JOB_CODE
            ,SRC.POSITION_NO
            ,SRC.DUTY_LOCATION
            ,SRC.DUTY_LOCATION_CODE
            ,SRC.BASIC_PAY_MIN
            ,SRC.BASIC_PAY_MAX
            ,SRC.PROFESSIONAL_DESIGNATION
            ,SRC.ELIGIBLE_FOR_BENEFITS
            ,SRC.NTE_DATE
            ,SRC.CATEGORY
          )
          ;
        
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, 'NEW_POSITION TABLE: Invalid data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
			END;
     
      BEGIN
				--------------------------------
				-- APPOINTMENT table
				--------------------------------
        
				MERGE INTO APPOINTMENT TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.RELATIONSHIP_TO_RECRUIT_ACTION
            ,X.SHARED_SELECTION
            ,X.RDR_PD_USED
            ,X.RDR_PD_NUMBER
            ,X.LEGISLATIVE_INITIATIVE_USED
            ,X.TENTATIVE_JOB_OFFER_DATE
            ,X.TENTATIVE_JOB_OFFER_RSPNS_DT
            ,X.JOB_OFFER_RESPONSE
            ,X.ADDITIONAL_APPROVAL_REQ
            ,X.ADDITIONAL_APPROVAL_COMMENT
            ,X.DT_OFFICIAL_JOB_OFFER
            ,X.OFFICIAL_JOB_OFFER_RESP_DT
            ,X.DT_SECURITY_INVESTIG_INITIATED
            ,X.OF306_ASSIGNED_ONBOARD_MGR
            ,X.CLEARANCE_LEVEL_REQUIRED
            ,X.DATE_SENT_FOR_OF306_REVIEW
            ,X.DATE_DPSAC_NOTIFICATION_RCVD
            ,X.DPSAC_REVIEW_DISPOSITION
            ,X.DATE_PREP_NEW_HIRE_EMAIL_SENT
            ,X.TYPE_SELECTION
            ,X.APPOINTMENT_TYPE
            ,X.NATURE_ACTION_CODE
            ,X.HIRING_FLEX_USED
            ,X.PRIORITY_PLACEMENT
            ,X.HIRING_FLEX_TYPE
            ,X.HIRING_FLEX_TYPE_OTHER
            ,X.IS_PATHWAY_AGREE_COMP
            ,X.WORK_PERMIT_REQUIRED
            ,X.DATE_WORK_PERMIT_RECEIVED
            ,X.MEDICAL_SPECIALITY
            ,X.TYPE_PREFERENCE
            ,X.IS_REEMPLOYED_ANNUITANT
            ,X.EDUCATIONAL_DOCS_RCVD_DATE
            ,X.APPOINTEE_REFERRED_BY
            ,X.IS_TEMP_FED_EMP_ID_ASSIGNED
            ,X.IS_RELEASE_DATE_REQUESTED
            ,X.DATE_RELEASE_REQUESTED
            ,X.APPROVED_RELEASE_DATE
            ,X.DATE_PKG_SENT_FOR_ADDL_APPR
            ,X.DATE_APPR_DEC_RECVD_HR
            ,X.FIC_DIS_APPROVAL_DATE
            ,X.VISA_EAD_TYPE
            ,X.VISA_EAD_EFFECTIVE_DATE
            ,X.VISA_EAD_EXPIRATION_DATE
            ,X.DEU_SELECTION_APRVR
            ,X.DEU_SELECTION_APRVR_ID
            ,X.DEU_SELECTION_ADDL_INFO_NEEDED
            ,X.DEU_SELECTION_DCSN
            ,X.DATE_TO_DEU_FOR_DECISION
            ,X.DEU_SELECTION_DCSN_DATE
            ,X.DEU_SELECTION_DCSN_CMNTS
            ,X.EXP_DATE_OF_PROG_COMP
            ,X.PAY_TYPE
            ,X.DATE_ARP_SENT_FOR_APPROVAL
            ,X.DATE_ARP_APPROVED
            ,X.STEP_ASSIGNED
            ,X.DT_HPR_AUTHORIZED_BY_CUSTOMER
            ,X.MAXIMUM_PAYABLE_RATE
            ,X.ARP_JUSTIFICATION
            ,X.ARP_STEP_DETERMINATION 
        	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
                ,RELATIONSHIP_TO_RECRUIT_ACTION				VARCHAR2(100) PATH 'APPOINTMENT/A_RELATIONSIHP_ACT'
                ,SHARED_SELECTION				VARCHAR2(50) PATH 'APPOINTMENT/SHARED_SELECTION'
                ,RDR_PD_USED				VARCHAR2(3) PATH 'APPOINTMENT/HR_CARDS_PD_USED'
                ,RDR_PD_NUMBER				VARCHAR2(50) PATH 'APPOINTMENT/HR_CARDS_PD_KEY_NUMBER'
                ,LEGISLATIVE_INITIATIVE_USED				VARCHAR2(50) PATH 'APPOINTMENT/LEGISLATIVE_INITIATIVE_USED'
                ,TENTATIVE_JOB_OFFER_DATE				DATE PATH 'APPOINTMENT/A_DATE_TENT_JOB_OFF'
                ,TENTATIVE_JOB_OFFER_RSPNS_DT				DATE PATH 'APPOINTMENT/A_DATE_TENT_JOB_PES'
                ,JOB_OFFER_RESPONSE				VARCHAR2(25) PATH 'APPOINTMENT/A_JOB_OFF_RES'
                ,ADDITIONAL_APPROVAL_REQ				VARCHAR2(3) PATH 'APPOINTMENT/ADDITIONAL_APPROVAL_REQ'
                ,ADDITIONAL_APPROVAL_COMMENT				varchar2(4000)  PATH 'APPOINTMENT/ADDITIONAL_APPROVAL_COMMENT'
                ,DT_OFFICIAL_JOB_OFFER				DATE PATH 'APPOINTMENT/A_DATE_OFF_JOB'
                ,OFFICIAL_JOB_OFFER_RESP_DT				DATE  PATH 'APPOINTMENT/A_DATE_JOB_OFF_RESP'
                ,DT_SECURITY_INVESTIG_INITIATED				DATE PATH 'APPOINTMENT/DATE_SECURITY_INVESTIGATION_INITIATED' 
                ,OF306_ASSIGNED_ONBOARD_MGR				VARCHAR2(3) PATH 'APPOINTMENT/A_306_AS_ON_MAN' 
                ,CLEARANCE_LEVEL_REQUIRED				VARCHAR2(30) PATH 'APPOINTMENT/A_CLEAR_LEV_REQ' 
                ,DATE_SENT_FOR_OF306_REVIEW     DATE      PATH 'APPOINTMENT/DATE_SENT_FOR_OF306_REVIEW'
                ,DATE_DPSAC_NOTIFICATION_RCVD     DATE      PATH 'APPOINTMENT/A_DATE_SECU_NOTI_REC'
                ,DPSAC_REVIEW_DISPOSITION     VARCHAR2(40)      PATH 'APPOINTMENT/A_SEC_REV_DISP'
                ,DATE_PREP_NEW_HIRE_EMAIL_SENT     DATE      PATH 'APPOINTMENT/A_DATE_PRE_NEW_HIR_EMAIL'
                ,TYPE_SELECTION     VARCHAR2(30)      PATH 'APPOINTMENT/A_TYPE_SEL'
                ,APPOINTMENT_TYPE     VARCHAR2(50)      PATH 'APPOINTMENT/A_APPOINT_TYPE'
                ,NATURE_ACTION_CODE     VARCHAR2(75)       PATH 'APPOINTMENT/A_NAT_ACT_CD'
                ,HIRING_FLEX_USED     VARCHAR2(3)      PATH 'APPOINTMENT/HIRING_FLEX_USED'
                ,PRIORITY_PLACEMENT     VARCHAR2(50)     PATH 'APPOINTMENT/PRIORITY_PLACEMENT'
                ,HIRING_FLEX_TYPE     VARCHAR2(75)      PATH 'APPOINTMENT/HIRING_FLEX_TYPE'
                ,HIRING_FLEX_TYPE_OTHER     VARCHAR2(50)      PATH 'APPOINTMENT/HIRING_FLEX_TYPE_OTHER'
                ,IS_PATHWAY_AGREE_COMP     VARCHAR2(3)      PATH 'APPOINTMENT/IS_PATHWAY_AGREE_COMP'
               ,WORK_PERMIT_REQUIRED     VARCHAR2(3)      PATH 'APPOINTMENT/WORK_PERMIT_REQUIRED'
               ,DATE_WORK_PERMIT_RECEIVED     DATE     PATH 'APPOINTMENT/DATE_WORK_PERMIT_RECEIVED'
               ,MEDICAL_SPECIALITY     VARCHAR2(1000)      PATH 'APPOINTMENT/MEDICAL_SPECIALITY'
               ,TYPE_PREFERENCE     VARCHAR2(40)      PATH 'APPOINTMENT/TYPE_PREFERENCE'
               ,IS_REEMPLOYED_ANNUITANT     VARCHAR2(50)      PATH 'APPOINTMENT/IS_REEMPLOYED_ANNUITANT'      
               ,EDUCATIONAL_DOCS_RCVD_DATE     DATE      PATH 'APPOINTMENT/EDUCATIONAL_DOCS_RCVD_DATE'
               ,APPOINTEE_REFERRED_BY       VARCHAR2(1000) PATH 'APPOINTMENT/APPOINTEE_REFERRED_BY'
              ,IS_TEMP_FED_EMP_ID_ASSIGNED  VARCHAR2(3) PATH 'FINALPROCESSING/IS_TEMP_FED_EMP_ID_ASSIGNED'
              ,IS_RELEASE_DATE_REQUESTED VARCHAR2(3) PATH 'APPROVAL/IS_RELEASE_DATE_REQUESTED'
              ,DATE_RELEASE_REQUESTED      DATE  PATH 'APPROVAL/DATE_RELEASE_REQUESTED'
              ,APPROVED_RELEASE_DATE      DATE  PATH 'APPROVAL/APPROVED_RELEASE_DATE'
              ,DATE_PKG_SENT_FOR_ADDL_APPR DATE PATH 'APPROVAL/DATE_PKG_SENT_FOR_ADDL_APPR'
              ,DATE_APPR_DEC_RECVD_HR     DATE PATH 'APPROVAL/DATE_APPR_DEC_RECVD_HR'
              ,FIC_DIS_APPROVAL_DATE      DATE PATH 'APPROVAL/FIC_DIS_APPROVAL_DATE'
              ,VISA_EAD_TYPE               VARCHAR2(50) PATH 'APPROVAL/VISA_EAD_TYPE'
              ,VISA_EAD_EFFECTIVE_DATE      DATE PATH 'APPROVAL/VISA_EAD_EFFECTIVE_DATE'
              ,VISA_EAD_EXPIRATION_DATE     DATE PATH 'APPROVAL/VISA_EAD_EXPIRATION_DATE'
              ,DEU_SELECTION_APRVR          VARCHAR2(50) PATH 'APPROVAL/DEU_SELECTION_APRVR'
              ,DEU_SELECTION_APRVR_ID       VARCHAR2(10) PATH 'APPROVAL/DEU_SELECTION_APRVR_ID'
              ,DEU_SELECTION_ADDL_INFO_NEEDED   varchar2(4000)  PATH 'APPROVAL/DEU_SELECTION_ADDL_INFO_NEEDED'
              ,DEU_SELECTION_DCSN             VARCHAR2(20) PATH 'APPROVAL/DEU_SELECTION_DCSN'
              ,DATE_TO_DEU_FOR_DECISION       DATE        PATH 'APPROVAL/DATE_TO_DEU_FOR_DECISION'
              ,DEU_SELECTION_DCSN_DATE        DATE          PATH 'APPROVAL/DEU_SELECTION_DCSN_DATE'
              ,DEU_SELECTION_DCSN_CMNTS       varchar2(4000)          PATH 'APPROVAL/DEU_SELECTION_DCSN_CMNTS'
              ,EXP_DATE_OF_PROG_COMP          DATE          PATH 'APPOINTMENT/A_EXP_DATE_PRG_COM'
              ,PAY_TYPE                     VARCHAR2(30)    PATH 'PAYINFORMATION/PAY_TYPE'
              ,DATE_ARP_SENT_FOR_APPROVAL   DATE            PATH 'PAYINFORMATION/DATE_ARP_SENT_FOR_APPROVAL'
              ,DATE_ARP_APPROVED            DATE            PATH 'PAYINFORMATION/DATE_ARP_APPROVED'
              ,STEP_ASSIGNED                VARCHAR2(30)    PATH 'PAYINFORMATION/STEP_ASSIGNED'
              ,DT_HPR_AUTHORIZED_BY_CUSTOMER    DATE        PATH 'PAYINFORMATION/DATE_HPR_AUTHORIZED_BY_CUSTOMER'
              ,MAXIMUM_PAYABLE_RATE             NUMBER(10)    PATH 'PAYINFORMATION/MAXIMUM_PAYABLE_RATE'
              ,ARP_JUSTIFICATION            VARCHAR2(1000)    PATH 'PAYINFORMATION/ARP_JUSTIFICATION'
              ,ARP_STEP_DETERMINATION       VARCHAR2(1000)    PATH 'PAYINFORMATION/ARP_STEP_DETERMINATION'
						) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
           TRG.RELATIONSHIP_TO_RECRUIT_ACTION = SRC.RELATIONSHIP_TO_RECRUIT_ACTION
           ,TRG.SHARED_SELECTION = SRC.SHARED_SELECTION
           ,TRG.RDR_PD_USED = SRC.RDR_PD_USED
           ,TRG.RDR_PD_NUMBER = SRC.RDR_PD_NUMBER
           ,TRG.LEGISLATIVE_INITIATIVE_USED = SRC.LEGISLATIVE_INITIATIVE_USED
           ,TRG.TENTATIVE_JOB_OFFER_DATE = SRC.TENTATIVE_JOB_OFFER_DATE
           ,TRG.TENTATIVE_JOB_OFFER_RSPNS_DT = SRC.TENTATIVE_JOB_OFFER_RSPNS_DT
           ,TRG.JOB_OFFER_RESPONSE = SRC.JOB_OFFER_RESPONSE
           ,TRG.ADDITIONAL_APPROVAL_REQ = SRC.ADDITIONAL_APPROVAL_REQ
           ,TRG.ADDITIONAL_APPROVAL_COMMENT = SRC.ADDITIONAL_APPROVAL_COMMENT
           ,TRG.DT_OFFICIAL_JOB_OFFER = SRC.DT_OFFICIAL_JOB_OFFER
           ,TRG.OFFICIAL_JOB_OFFER_RESP_DT = SRC.OFFICIAL_JOB_OFFER_RESP_DT
           ,TRG.DT_SECURITY_INVESTIG_INITIATED = SRC.DT_SECURITY_INVESTIG_INITIATED
           ,TRG.OF306_ASSIGNED_ONBOARD_MGR = SRC.OF306_ASSIGNED_ONBOARD_MGR
           ,TRG.CLEARANCE_LEVEL_REQUIRED = SRC.CLEARANCE_LEVEL_REQUIRED
           ,TRG.DATE_SENT_FOR_OF306_REVIEW = SRC.DATE_SENT_FOR_OF306_REVIEW
           ,TRG.DATE_DPSAC_NOTIFICATION_RCVD = SRC.DATE_DPSAC_NOTIFICATION_RCVD
           ,TRG.DPSAC_REVIEW_DISPOSITION = SRC.DPSAC_REVIEW_DISPOSITION
           ,TRG.DATE_PREP_NEW_HIRE_EMAIL_SENT = SRC.DATE_PREP_NEW_HIRE_EMAIL_SENT
           ,TRG.TYPE_SELECTION = SRC.TYPE_SELECTION
           ,TRG.APPOINTMENT_TYPE = SRC.APPOINTMENT_TYPE
           ,TRG.NATURE_ACTION_CODE = SRC.NATURE_ACTION_CODE
           ,TRG.HIRING_FLEX_USED = SRC.HIRING_FLEX_USED
           ,TRG.PRIORITY_PLACEMENT = SRC.PRIORITY_PLACEMENT
           ,TRG.HIRING_FLEX_TYPE = SRC.HIRING_FLEX_TYPE
           ,TRG.HIRING_FLEX_TYPE_OTHER = SRC.HIRING_FLEX_TYPE_OTHER
           ,TRG.IS_PATHWAY_AGREE_COMP = SRC.IS_PATHWAY_AGREE_COMP
           ,TRG.WORK_PERMIT_REQUIRED = SRC.WORK_PERMIT_REQUIRED
           ,TRG.DATE_WORK_PERMIT_RECEIVED = SRC.DATE_WORK_PERMIT_RECEIVED
           ,TRG.MEDICAL_SPECIALITY = SRC.MEDICAL_SPECIALITY
           ,TRG.TYPE_PREFERENCE = SRC.TYPE_PREFERENCE
           ,TRG.IS_REEMPLOYED_ANNUITANT = SRC.IS_REEMPLOYED_ANNUITANT
           ,TRG.EDUCATIONAL_DOCS_RCVD_DATE = SRC.EDUCATIONAL_DOCS_RCVD_DATE
           ,TRG.APPOINTEE_REFERRED_BY = SRC.APPOINTEE_REFERRED_BY
           ,TRG.IS_TEMP_FED_EMP_ID_ASSIGNED = SRC.IS_TEMP_FED_EMP_ID_ASSIGNED
           ,TRG.IS_RELEASE_DATE_REQUESTED = SRC.IS_RELEASE_DATE_REQUESTED
           ,TRG.DATE_RELEASE_REQUESTED = SRC.DATE_RELEASE_REQUESTED
           ,TRG.APPROVED_RELEASE_DATE = SRC.APPROVED_RELEASE_DATE
           ,TRG.DATE_PKG_SENT_FOR_ADDL_APPR = SRC.DATE_PKG_SENT_FOR_ADDL_APPR
           ,TRG.DATE_APPR_DEC_RECVD_HR = SRC.DATE_APPR_DEC_RECVD_HR
           ,TRG.FIC_DIS_APPROVAL_DATE = SRC.FIC_DIS_APPROVAL_DATE
           ,TRG.VISA_EAD_TYPE = SRC.VISA_EAD_TYPE
           ,TRG.VISA_EAD_EFFECTIVE_DATE = SRC.VISA_EAD_EFFECTIVE_DATE
           ,TRG.VISA_EAD_EXPIRATION_DATE = SRC.VISA_EAD_EXPIRATION_DATE
           ,TRG.DEU_SELECTION_APRVR = SRC.DEU_SELECTION_APRVR
           ,TRG.DEU_SELECTION_APRVR_ID = SRC.DEU_SELECTION_APRVR_ID
           ,TRG.DEU_SELECTION_ADDL_INFO_NEEDED = SRC.DEU_SELECTION_ADDL_INFO_NEEDED
           ,TRG.DEU_SELECTION_DCSN = SRC.DEU_SELECTION_DCSN
           ,TRG.DATE_TO_DEU_FOR_DECISION = SRC.DATE_TO_DEU_FOR_DECISION
           ,TRG.DEU_SELECTION_DCSN_DATE = SRC.DEU_SELECTION_DCSN_DATE
           ,TRG.DEU_SELECTION_DCSN_CMNTS = SRC.DEU_SELECTION_DCSN_CMNTS
           ,TRG.EXP_DATE_OF_PROG_COMP = SRC.EXP_DATE_OF_PROG_COMP
           ,TRG.PAY_TYPE = SRC.PAY_TYPE
            ,TRG.DATE_ARP_SENT_FOR_APPROVAL = SRC.DATE_ARP_SENT_FOR_APPROVAL
            ,TRG.DATE_ARP_APPROVED = SRC.DATE_ARP_APPROVED
            ,TRG.STEP_ASSIGNED = SRC.STEP_ASSIGNED
            ,TRG.DT_HPR_AUTHORIZED_BY_CUSTOMER = SRC.DT_HPR_AUTHORIZED_BY_CUSTOMER
            ,TRG.MAXIMUM_PAYABLE_RATE = SRC.MAXIMUM_PAYABLE_RATE
            ,TRG.ARP_JUSTIFICATION = SRC.ARP_JUSTIFICATION
            ,TRG.ARP_STEP_DETERMINATION = SRC.ARP_STEP_DETERMINATION
          WHEN NOT MATCHED THEN INSERT
          (
            TRG.TRANSACTION_ID
            ,TRG.RELATIONSHIP_TO_RECRUIT_ACTION
            ,TRG.SHARED_SELECTION
            ,TRG.RDR_PD_USED
            ,TRG.RDR_PD_NUMBER
            ,TRG.LEGISLATIVE_INITIATIVE_USED
            ,TRG.TENTATIVE_JOB_OFFER_DATE
            ,TRG.TENTATIVE_JOB_OFFER_RSPNS_DT
            ,TRG.JOB_OFFER_RESPONSE
            ,TRG.ADDITIONAL_APPROVAL_REQ
            ,TRG.ADDITIONAL_APPROVAL_COMMENT
            ,TRG.DT_OFFICIAL_JOB_OFFER
            ,TRG.OFFICIAL_JOB_OFFER_RESP_DT
            ,TRG.DT_SECURITY_INVESTIG_INITIATED
            ,TRG.OF306_ASSIGNED_ONBOARD_MGR
            ,TRG.CLEARANCE_LEVEL_REQUIRED
            ,TRG.DATE_SENT_FOR_OF306_REVIEW
            ,TRG.DATE_DPSAC_NOTIFICATION_RCVD
            ,TRG.DPSAC_REVIEW_DISPOSITION
            ,TRG.DATE_PREP_NEW_HIRE_EMAIL_SENT
            ,TRG.TYPE_SELECTION
            ,TRG.APPOINTMENT_TYPE
            ,TRG.NATURE_ACTION_CODE
            ,TRG.HIRING_FLEX_USED
            ,TRG.PRIORITY_PLACEMENT
            ,TRG.HIRING_FLEX_TYPE
            ,TRG.HIRING_FLEX_TYPE_OTHER
            ,TRG.IS_PATHWAY_AGREE_COMP
            ,TRG.WORK_PERMIT_REQUIRED
            ,TRG.DATE_WORK_PERMIT_RECEIVED
            ,TRG.MEDICAL_SPECIALITY
            ,TRG.TYPE_PREFERENCE
            ,TRG.IS_REEMPLOYED_ANNUITANT
            ,TRG.EDUCATIONAL_DOCS_RCVD_DATE
            ,TRG.APPOINTEE_REFERRED_BY
            ,TRG.IS_TEMP_FED_EMP_ID_ASSIGNED
            ,TRG.IS_RELEASE_DATE_REQUESTED
            ,TRG.DATE_RELEASE_REQUESTED
            ,TRG.APPROVED_RELEASE_DATE
            ,TRG.DATE_PKG_SENT_FOR_ADDL_APPR
            ,TRG.DATE_APPR_DEC_RECVD_HR
            ,TRG.FIC_DIS_APPROVAL_DATE
            ,TRG.VISA_EAD_TYPE
            ,TRG.VISA_EAD_EFFECTIVE_DATE
            ,TRG.VISA_EAD_EXPIRATION_DATE
            ,TRG.DEU_SELECTION_APRVR
            ,TRG.DEU_SELECTION_APRVR_ID
            ,TRG.DEU_SELECTION_ADDL_INFO_NEEDED
            ,TRG.DEU_SELECTION_DCSN
            ,TRG.DATE_TO_DEU_FOR_DECISION
            ,TRG.DEU_SELECTION_DCSN_DATE
            ,TRG.DEU_SELECTION_DCSN_CMNTS
            ,TRG.EXP_DATE_OF_PROG_COMP
            ,TRG.PAY_TYPE
            ,TRG.DATE_ARP_SENT_FOR_APPROVAL
            ,TRG.DATE_ARP_APPROVED
            ,TRG.STEP_ASSIGNED
            ,TRG.DT_HPR_AUTHORIZED_BY_CUSTOMER
            ,TRG.MAXIMUM_PAYABLE_RATE
            ,TRG.ARP_JUSTIFICATION
            ,TRG.ARP_STEP_DETERMINATION
          )
          VALUES
          (
            SRC.TRANSACTION_ID
            ,SRC.RELATIONSHIP_TO_RECRUIT_ACTION
            ,SRC.SHARED_SELECTION
            ,SRC.RDR_PD_USED
            ,SRC.RDR_PD_NUMBER
            ,SRC.LEGISLATIVE_INITIATIVE_USED
            ,SRC.TENTATIVE_JOB_OFFER_DATE
            ,SRC.TENTATIVE_JOB_OFFER_RSPNS_DT
            ,SRC.JOB_OFFER_RESPONSE
            ,SRC.ADDITIONAL_APPROVAL_REQ
            ,SRC.ADDITIONAL_APPROVAL_COMMENT
            ,SRC.DT_OFFICIAL_JOB_OFFER
            ,SRC.OFFICIAL_JOB_OFFER_RESP_DT
            ,SRC.DT_SECURITY_INVESTIG_INITIATED
            ,SRC.OF306_ASSIGNED_ONBOARD_MGR
            ,SRC.CLEARANCE_LEVEL_REQUIRED
            ,SRC.DATE_SENT_FOR_OF306_REVIEW
            ,SRC.DATE_DPSAC_NOTIFICATION_RCVD
            ,SRC.DPSAC_REVIEW_DISPOSITION
            ,SRC.DATE_PREP_NEW_HIRE_EMAIL_SENT
            ,SRC.TYPE_SELECTION
            ,SRC.APPOINTMENT_TYPE
            ,SRC.NATURE_ACTION_CODE
            ,SRC.HIRING_FLEX_USED
            ,SRC.PRIORITY_PLACEMENT
            ,SRC.HIRING_FLEX_TYPE
            ,SRC.HIRING_FLEX_TYPE_OTHER
            ,SRC.IS_PATHWAY_AGREE_COMP
            ,SRC.WORK_PERMIT_REQUIRED
            ,SRC.DATE_WORK_PERMIT_RECEIVED
            ,SRC.MEDICAL_SPECIALITY
            ,SRC.TYPE_PREFERENCE
            ,SRC.IS_REEMPLOYED_ANNUITANT
            ,SRC.EDUCATIONAL_DOCS_RCVD_DATE
            ,SRC.APPOINTEE_REFERRED_BY
            ,SRC.IS_TEMP_FED_EMP_ID_ASSIGNED
            ,SRC.IS_RELEASE_DATE_REQUESTED
            ,SRC.DATE_RELEASE_REQUESTED
            ,SRC.APPROVED_RELEASE_DATE
            ,SRC.DATE_PKG_SENT_FOR_ADDL_APPR
            ,SRC.DATE_APPR_DEC_RECVD_HR
            ,SRC.FIC_DIS_APPROVAL_DATE
            ,SRC.VISA_EAD_TYPE
            ,SRC.VISA_EAD_EFFECTIVE_DATE
            ,SRC.VISA_EAD_EXPIRATION_DATE
            ,SRC.DEU_SELECTION_APRVR
            ,SRC.DEU_SELECTION_APRVR_ID
            ,SRC.DEU_SELECTION_ADDL_INFO_NEEDED
            ,SRC.DEU_SELECTION_DCSN
            ,SRC.DATE_TO_DEU_FOR_DECISION
            ,SRC.DEU_SELECTION_DCSN_DATE
            ,SRC.DEU_SELECTION_DCSN_CMNTS
            ,SRC.EXP_DATE_OF_PROG_COMP
            ,SRC.PAY_TYPE
            ,SRC.DATE_ARP_SENT_FOR_APPROVAL
            ,SRC.DATE_ARP_APPROVED
            ,SRC.STEP_ASSIGNED
            ,SRC.DT_HPR_AUTHORIZED_BY_CUSTOMER
            ,SRC.MAXIMUM_PAYABLE_RATE
            ,SRC.ARP_JUSTIFICATION
            ,SRC.ARP_STEP_DETERMINATION
          )
          ;
        
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, 'APPOINTMENT TABLE: Invalid data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
    END;
    
    -----------------------------------------
    -- Multi Select Insert
    -------------------------------------------
    ---SP_UPDATE_MULTI_SELECT(I_TRANSACTIONID, I_FORM_NAME, I_FIELD_NAME, I_TABLE_NAME);
    
    SP_UPDATE_MULTI_SELECT(I_TRANSACTIONID, 'APPOINTMENT', 'ARP_STEP_DETERMINATION', 'APPOINTMENT');
    SP_UPDATE_MULTI_SELECT(I_TRANSACTIONID, 'APPOINTMENT', 'ARP_JUSTIFICATION', 'APPOINTMENT');
    SP_UPDATE_MULTI_SELECT(I_TRANSACTIONID, 'APPOINTMENT', 'MEDICAL_SPECIALITY', 'APPOINTMENT');
    SP_UPDATE_MULTI_SELECT(I_TRANSACTIONID, 'APPOINTMENT', 'APPOINTEE_REFERRED_BY', 'APPOINTMENT');

    
    BEGIN
				--------------------------------
				-- ORIENTATION table
				--------------------------------
        
				MERGE INTO ORIENTATION TRG
				USING
				(
					SELECT
            X.TRANSACTION_ID
            ,X.ATTENDED_ORIENTATION
            ,X.ORIENTATION_DATE
            ,X.ORIENTATION_LOCATION
            ,X.ORIENTATION_EMAIL_ADDRESS
            ,X.HIRE_TYPE
            ,X.DT_OFFICIAL_OFFER_LETTER_SENT
        	 FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
                ,ATTENDED_ORIENTATION				VARCHAR2(20) PATH 'ORIENTATION/ATTENDED_ORIENTATION'
                ,ORIENTATION_DATE         DATE PATH 'ORIENTATION/ORIENTATION_DATE'
                ,ORIENTATION_LOCATION         VARCHAR2(100) PATH 'ORIENTATION/ORIENTATION_LOCATION'
                ,ORIENTATION_EMAIL_ADDRESS         VARCHAR2(250) PATH 'ORIENTATION/ORIENTATION_EMAIL_ADDRESS'
                ,HIRE_TYPE         VARCHAR2(50) PATH 'ORIENTATION/HIRE_TYPE'
                ,DT_OFFICIAL_OFFER_LETTER_SENT         DATE PATH 'ORIENTATION/DATE_OFFICIAL_OFFER_LETTER_SENT'
  					) X
					WHERE X.TRANSACTION_ID = I_TRANSACTIONID
				) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)
				WHEN MATCHED THEN UPDATE SET
          TRG.ATTENDED_ORIENTATION = SRC.ATTENDED_ORIENTATION 
           ,TRG.ORIENTATION_DATE = SRC.ORIENTATION_DATE
           ,TRG.ORIENTATION_LOCATION = SRC.ORIENTATION_LOCATION
           ,TRG.ORIENTATION_EMAIL_ADDRESS = SRC.ORIENTATION_EMAIL_ADDRESS
           ,TRG.HIRE_TYPE = SRC.HIRE_TYPE
           ,TRG.DT_OFFICIAL_OFFER_LETTER_SENT = SRC.DT_OFFICIAL_OFFER_LETTER_SENT
          WHEN NOT MATCHED THEN INSERT
          (
            TRG.TRANSACTION_ID
            ,TRG.ATTENDED_ORIENTATION
            ,TRG.ORIENTATION_DATE
            ,TRG.ORIENTATION_LOCATION
            ,TRG.ORIENTATION_EMAIL_ADDRESS
            ,TRG.HIRE_TYPE
            ,TRG.DT_OFFICIAL_OFFER_LETTER_SENT
          )
          VALUES
          (
            SRC.TRANSACTION_ID
            ,SRC.ATTENDED_ORIENTATION
            ,SRC.ORIENTATION_DATE
            ,SRC.ORIENTATION_LOCATION
            ,SRC.ORIENTATION_EMAIL_ADDRESS
            ,SRC.HIRE_TYPE
            ,SRC.DT_OFFICIAL_OFFER_LETTER_SENT
          )
          ;
        
        
			EXCEPTION
				WHEN OTHERS THEN
 					RAISE_APPLICATION_ERROR(-20905, ' UPDATE ORIENTATION TABLE: Invalid data.  I_TRANSACTIONID = '
						|| TO_CHAR(I_TRANSACTIONID));
			END;
      
      BEGIN  
      	--------------------------------
				-- MAIN and SPA_PROCESSING table
				--------------------------------
        
        V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/STATUS/text()');
        IF V_XMLVALUE IS NOT NULL THEN
          V_STATUS := V_XMLVALUE.GETSTRINGVAL();
          V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/STATUS_DATE/text()');
          V_VALUE := V_XMLVALUE.GETSTRINGVAL();
          V_STATUSDATE := TO_DATE(V_VALUE,'YYYY/MM/DD HH24:MI:SS');
          V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/STATUS_USER_ID/text()');
          V_STATUSUSERID := V_XMLVALUE.GETSTRINGVAL();
          
          UPDATE MAIN SET STATUS = V_STATUS, STATUS_DATE = V_STATUSDATE, STATUS_USER_ID = V_STATUSUSERID 
          WHERE TRANSACTION_ID = I_TRANSACTIONID;
            
        END IF;
        V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/UPDATE_SENT_SPA/text()');
        IF V_XMLVALUE IS NOT NULL THEN
          V_UPDATESPA := V_XMLVALUE.GETSTRINGVAL();
          IF V_UPDATESPA = 'true' THEN
            MERGE INTO SPA_PROCESSING TRG
            USING
            (
            SELECT X.TRANSACTION_ID 
            FROM TBL_FORM_DTL FD  
						, XMLTABLE('/DOCUMENT'
							PASSING FD.FIELD_DATA
							COLUMNS
								TRANSACTION_ID					NUMBER(10)  PATH 'MAIN/TRANSACTION_ID'
               ) X
            WHERE X.TRANSACTION_ID = I_TRANSACTIONID
            ) SRC ON (SRC.TRANSACTION_ID = TRG.TRANSACTION_ID)         
            WHEN MATCHED THEN UPDATE SET
            TRG.DATE_SENT_TO_SPA = SYSDATE 
            WHEN NOT MATCHED THEN INSERT
            (
              TRG.TRANSACTION_ID
             ,TRG.DATE_SENT_TO_SPA
            )
            VALUES
            (
              SRC.TRANSACTION_ID
             ,SYSDATE        
            )
            ;
            
          END IF;
        END IF;
        V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/UPDATE_RYB/text()');
        
        IF V_XMLVALUE IS NOT NULL THEN
          V_UPDATERYB := V_XMLVALUE.GETSTRINGVAL();
          IF V_UPDATERYB = 'true' THEN           
            V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/RYB_CODE/text()');
            V_RYBCODE := V_XMLVALUE.GETSTRINGVAL();
            V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/RYB_STATUS/text()');
            V_RYBSTATUS := V_XMLVALUE.GETSTRINGVAL();
            V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MAIN/RYB_DESC/text()');
            V_RYBDESC := V_XMLVALUE.GETSTRINGVAL();
           
            UPDATE MAIN SET RYB_CODE = V_RYBCODE, RYB_STATUS = V_RYBSTATUS, RYB_DESCRIPTION = V_RYBDESC 
            WHERE TRANSACTION_ID = I_TRANSACTIONID;
          
           END IF;
        END IF;
      END;

		END IF;

	EXCEPTION
		WHEN E_INVALID_PROCID THEN
			SP_ERROR_LOG();
			--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing SP_UPDATE_APPOINTMENT_PROCESS -------------------');
			--DBMS_OUTPUT.PUT_LINE('ERROR message = ' || 'Process ID is not valid');
		WHEN OTHERS THEN
			SP_ERROR_LOG();
			V_ERRCODE := SQLCODE;
			V_ERRMSG := SQLERRM;
			--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing SP_UPDATE_APPOINTMENT_PROCESS -------------------');
			--DBMS_OUTPUT.PUT_LINE('Error code    = ' || V_ERRCODE);
			--DBMS_OUTPUT.PUT_LINE('Error message = ' || V_ERRMSG);
	END;
/

--------------------------------------------------------
--  DDL for Procedure SP_UPDATE_FORM_DATA
--------------------------------------------------------

create or replace PROCEDURE SP_UPDATE_FORM_DATA
(
	--IO_ID               IN OUT  NUMBER
	I_FORM_TYPE       IN      VARCHAR2
	, I_FIELD_DATA      IN      CLOB
	, I_USER            IN      VARCHAR2
	, I_PROCID          IN      NUMBER
  , I_TRANSACTIONID   IN      NUMBER
	, I_ACTSEQ          IN      NUMBER
	, I_WITEMSEQ        IN      NUMBER
)
IS
	V_ID NUMBER(20);
	V_FORM_TYPE VARCHAR2(50);
	V_USER VARCHAR2(50);
	V_PROCID NUMBER(10);
  V_TRANSACTION NUMBER(10);
	V_ACTSEQ NUMBER(10);
	V_WITEMSEQ NUMBER(10);
	V_REC_CNT NUMBER(10);
	V_MAX_ID NUMBER(20);
	V_XMLDOC XMLTYPE;
  
  
BEGIN

	--DBMS_OUTPUT.PUT_LINE('PARAMETERS ----------------');
	--DBMS_OUTPUT.PUT_LINE('    ID IS NULL?  = ' || (CASE WHEN IO_ID IS NULL THEN 'YES' ELSE 'NO' END));
	--DBMS_OUTPUT.PUT_LINE('    ID           = ' || TO_CHAR(IO_ID));
	--DBMS_OUTPUT.PUT_LINE('    I_FORM_TYPE  = ' || I_FORM_TYPE);
	--DBMS_OUTPUT.PUT_LINE('    I_FIELD_DATA = ' || I_FIELD_DATA);
	--DBMS_OUTPUT.PUT_LINE('    I_USER       = ' || I_USER);
	--DBMS_OUTPUT.PUT_LINE('    I_PROCID     = ' || TO_CHAR(I_PROCID));
	--DBMS_OUTPUT.PUT_LINE('    I_ACTSEQ     = ' || TO_CHAR(I_ACTSEQ));
	--DBMS_OUTPUT.PUT_LINE('    I_WITEMSEQ   = ' || TO_CHAR(I_WITEMSEQ));
	--DBMS_OUTPUT.PUT_LINE(' ----------------');
	V_XMLDOC := XMLTYPE(I_FIELD_DATA);
 -- DBMS_OUTPUT.PUT_LINE('IO_ID = '  || IO_ID);

	--IF IO_ID IS NOT NULL AND IO_ID > 0 THEN
	--	V_ID := IO_ID;
	--ELSE
 
		--DBMS_OUTPUT.PUT_LINE('Attempt to find record using PROCID: ' || TO_CHAR(I_PROCID));
		-- if existing record is found using procid, use that id
 		
    IF I_TRANSACTIONID IS NOT NULL AND I_TRANSACTIONID > 0 THEN
      V_TRANSACTION := I_TRANSACTIONID;
			BEGIN
				SELECT ID INTO V_ID FROM TBL_FORM_DTL WHERE TRANSACTIONID = I_TRANSACTIONID;
 			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					V_ID := -1;
			END;
		END IF;
    
   /*IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN
			BEGIN
				SELECT ID INTO V_ID FROM TBL_FORM_DTL WHERE PROCID = I_PROCID;
 			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					V_ID := -1;
			END;
		END IF;
  */
		--DBMS_OUTPUT.PUT_LINE('No record found for PROCID: ' || TO_CHAR(I_PROCID));

--    IO_ID := V_ID;
	--END IF;

	--DBMS_OUTPUT.PUT_LINE('ID to be used is determined: ' || TO_CHAR(V_ID));

	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN
		V_PROCID := I_PROCID;
	ELSE
		V_PROCID := 0;
	END IF;

	IF I_ACTSEQ IS NOT NULL AND I_ACTSEQ > 0 THEN
		V_ACTSEQ := I_ACTSEQ;
	ELSE
		V_ACTSEQ := 0;
	END IF;

	IF I_WITEMSEQ IS NOT NULL AND I_WITEMSEQ > 0 THEN
		V_WITEMSEQ := I_WITEMSEQ;
	ELSE
		V_WITEMSEQ := 0;
	END IF;

	BEGIN
		SELECT COUNT(*) INTO V_REC_CNT FROM TBL_FORM_DTL WHERE ID = V_ID;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			V_REC_CNT := -1;
	END;

	V_FORM_TYPE := I_FORM_TYPE;
	V_USER := I_USER;

	--DBMS_OUTPUT.PUT_LINE('Inspected existence of same record.');
	--DBMS_OUTPUT.PUT_LINE('    V_ID       = ' || TO_CHAR(V_ID));
	--DBMS_OUTPUT.PUT_LINE('    V_PROCID   = ' || TO_CHAR(V_PROCID));
	--DBMS_OUTPUT.PUT_LINE('    V_ACTSEQ   = ' || TO_CHAR(V_ACTSEQ));
	--DBMS_OUTPUT.PUT_LINE('    V_WITEMSEQ = ' || TO_CHAR(V_WITEMSEQ));
	--DBMS_OUTPUT.PUT_LINE('    V_REC_CNT  = ' || TO_CHAR(V_REC_CNT));

	

	IF V_REC_CNT > 0 THEN
		--DBMS_OUTPUT.PUT_LINE('Record found so that field data will be updated on the same record.');

		UPDATE TBL_FORM_DTL
		SET
			PROCID = V_PROCID
      , TRANSACTIONID = I_TRANSACTIONID
			, ACTSEQ = V_ACTSEQ
			, WITEMSEQ = V_WITEMSEQ
			, FIELD_DATA = V_XMLDOC
			, MOD_DT = SYSDATE
			, MOD_USR = V_USER
		WHERE ID = V_ID
		;

	ELSE
		--DBMS_OUTPUT.PUT_LINE('No record found so that new record will be inserted.');
   
    
		INSERT INTO TBL_FORM_DTL
		(
--			ID
--			, PROCID
			PROCID
      , TRANSACTIONID
			, ACTSEQ
			, WITEMSEQ
			, FORM_TYPE
			, FIELD_DATA
			, CRT_DT
			, CRT_USR
		)
		VALUES
		(
--			V_ID
--			, V_PROCID
			V_PROCID
      , I_TRANSACTIONID
			, V_ACTSEQ
			, V_WITEMSEQ
			, V_FORM_TYPE
			, V_XMLDOC
			, SYSDATE
			, V_USER
		)
		;
    
	END IF;

	-- Update process variable and transition xml into individual tables
	-- for respective process definition
	IF V_FORM_TYPE = 'WHRSCDETERMINE' THEN
		SP_UPDATE_PV_DETERMINE(V_PROCID, V_XMLDOC);
		SP_UPDATE_DETERMINE_TABLE(V_PROCID, V_XMLDOC);
	ELSIF V_FORM_TYPE = 'WHRSCRECRUITMENT' THEN
		SP_UPDATE_PV_RECRUITMENT(V_PROCID, V_XMLDOC);
    SP_UPDATE_RECRUITMENT_PROCESS(V_TRANSACTION, V_XMLDOC);
	ELSIF V_FORM_TYPE = 'WHRSCAPPOINTMENT' THEN
    SP_UPDATE_PV_APPOINTMENT(V_PROCID, V_XMLDOC);
    SP_UPDATE_APPOINTMENT_PROCESS(V_TRANSACTION, V_XMLDOC);
  END IF;

	COMMIT;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('Error occurred while executing SP_UPDATE_FORM_DATA -------------------');

END;
/